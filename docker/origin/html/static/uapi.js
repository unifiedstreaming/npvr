/*
 *	uapi.js ðŸ“º stable-49-g354c9f4, 2020-03-13 16:20:56
 */
// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
$hx_exports["uapi"] = $hx_exports["uapi"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Argan = function() { };
$hxClasses["Argan"] = Argan;
Argan.__name__ = "Argan";
Argan.start = function(config) {
	if(null != config) {
		var args_set = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(config);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var value = Reflect.field(config,f);
			if(__map_reserved[f] != null) {
				args_set.setReserved(f,value);
			} else {
				args_set.h[f] = value;
			}
		}
		Argan.args = args_set;
	}
};
Argan.objectFromMap = function(map) {
	var obj = { };
	var k = map.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		obj[k1] = __map_reserved[k1] != null ? map.getReserved(k1) : map.h[k1];
	}
	return obj;
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = $hx_exports["uapi"] = function() {
	this.hooks = uapi_Hooks;
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
};
Main.getPlayers = function() {
	var players = { };
	var resources = haxe_Resource.listNames();
	resources.push("native");
	var _g = 0;
	while(_g < resources.length) {
		var n = resources[_g];
		++_g;
		if(n.indexOf("logo") == -1 && n.indexOf("template") == -1 && n != Argan.HELP_RESOURCE_KEY && !StringTools.endsWith(n,"-src") && !StringTools.endsWith(n,"-argan")) {
			players[n] = JSON.parse(haxe_Resource.getString(n + "-argan"));
		}
	}
	return players;
};
Main.getHelp = function() {
	return Argan.objectFromMap(haxe_Unserializer.run(haxe_Resource.getString("_help_map")));
};
Main.getPlayerVersions = function(player) {
	return JSON.parse(haxe_Resource.getString("" + player + "-src"));
};
Main.addPlayerSrc = function(player,urls) {
	var result = new Array(urls.length);
	var _g = 0;
	var _g1 = urls.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = Main.absUrl(urls[i]);
	}
	urls = result;
	var _this = Main.playerSrcExtended;
	if(__map_reserved[player] != null) {
		_this.setReserved(player,urls);
	} else {
		_this.h[player] = urls;
	}
};
Main.overridePlayerSrcs = function(player_srcs_object) {
	Main.playerSrcOverride = player_srcs_object;
};
Main.writePlayer = function(parent,uri,player_version_string,player_config,inject_head,inject_body) {
	if(player_version_string == null) {
		player_version_string = "dashjs";
	}
	Argan.start(player_config);
	var iframe = window.document.createElement("iframe");
	iframe.src = "about:blank";
	iframe.setAttribute("importance","high");
	iframe.setAttribute("border","0");
	iframe.setAttribute("allowfullscreen","true");
	iframe.setAttribute("seamless","true");
	iframe.setAttribute("frameborder","0");
	var meta = player_version_string.split(":");
	var player = meta[0];
	if(haxe_Resource.listNames().indexOf(player) == -1 && player != "native") {
		throw new js__$Boot_HaxeError("unknown player \"" + player + "\", please select any of " + Std.string(haxe_Resource.listNames()) + ".");
	}
	var playerBody = haxe_Resource.getString("" + player);
	if(playerBody != null && Object.prototype.hasOwnProperty.call(window,"Blob")) {
		var split = playerBody.split(",");
		playerBody = URL.createObjectURL(new Blob([haxe_crypto_Base64.decode(split[1]).b.bufferValue],{ type : split[0].split(";")[0]}));
	}
	var version = meta[1];
	var head = [];
	var body = ["<script src=\"" + playerBody + "\"></script>"];
	var error = null;
	var last_src = "#";
	if(player == "native") {
		body = ["\n\t\t\t\t<script>\n\t\t\t\t\tvideo.src = uri;\n\t\t\t\t\tif(!!window.ApplePaySession){ //safari\n\t\t\t\t\t\tvideo.addEventListener(\"webkitneedkey\", (e) => {});\n\t\t\t\t\t\tvideo.addEventListener(\"webkitkeymessage\", (e) => {});\n\t\t\t\t\t\tvideo.addEventListener(\"webkitkeyadded\", (e) => {});\n\t\t\t\t\t\tvideo.addEventListener(\"webkitkeyerror\", (e) => {});\n\t\t\t\t\t}\n\t\t\t\t</script>\n\t\t\t"];
	} else {
		var _this = Main.playerSrcExtended;
		if(__map_reserved[player_version_string] != null ? _this.existsReserved(player_version_string) : _this.h.hasOwnProperty(player_version_string)) {
			var _g = 0;
			var _this1 = Main.playerSrcExtended;
			var _g1 = __map_reserved[player_version_string] != null ? _this1.getReserved(player_version_string) : _this1.h[player_version_string];
			while(_g < _g1.length) {
				var src = _g1[_g];
				++_g;
				last_src = src;
				head.push("<script crossorigin src=\"" + last_src + "\"></script>");
			}
		} else {
			var srcs = Main.playerSrcOverride == null ? JSON.parse(haxe_Resource.getString("" + player + "-src")) : Main.playerSrcOverride;
			var _g2 = 0;
			var _g11 = version == null ? Reflect.fields(srcs) : [version];
			while(_g2 < _g11.length) {
				var s = _g11[_g2];
				++_g2;
				version = s;
				if(Object.prototype.hasOwnProperty.call(srcs,s)) {
					var list = Reflect.field(srcs,s);
					var _g3 = 0;
					while(_g3 < list.length) {
						var src1 = list[_g3];
						++_g3;
						last_src = src1;
						head.push("<script crossorigin src=\"" + last_src + "\"></script>");
					}
				} else {
					error = "unknown version:" + version + " for \"" + player + "\"";
				}
				break;
			}
		}
	}
	Main.handleEitherType(inject_head,head);
	Main.handleEitherType(inject_body,body);
	var html = new haxe_Template(haxe_Resource.getString("template"));
	var html1 = encodeURIComponent(uri);
	var html2 = haxe_Resource.getString("logo");
	var html3 = "uapi.js  " + Main.Version() + " | " + player + " (" + version + ") | " + uri;
	var html4;
	var html5;
	if(Argan.args != null) {
		var _this2 = Argan.args;
		html5 = __map_reserved["autoplay"] != null ? _this2.existsReserved("autoplay") : _this2.h.hasOwnProperty("autoplay");
	} else {
		html5 = false;
	}
	if(html5) {
		var _this3 = Argan.args;
		var _ = __map_reserved["autoplay"] != null ? _this3.getReserved("autoplay") : _this3.h["autoplay"];
		html4 = typeof(_) == "boolean" ? _ : _ != "false";
	} else {
		html4 = true;
	}
	var html6;
	var html7;
	if(Argan.args != null) {
		var _this4 = Argan.args;
		html7 = __map_reserved["muted"] != null ? _this4.existsReserved("muted") : _this4.h.hasOwnProperty("muted");
	} else {
		html7 = false;
	}
	if(html7) {
		var _this5 = Argan.args;
		var _1 = __map_reserved["muted"] != null ? _this5.getReserved("muted") : _this5.h["muted"];
		html6 = typeof(_1) == "boolean" ? _1 : _1 != "false";
	} else {
		html6 = false;
	}
	var html8;
	var html9;
	if(Argan.args != null) {
		var _this6 = Argan.args;
		html9 = __map_reserved["controls"] != null ? _this6.existsReserved("controls") : _this6.h.hasOwnProperty("controls");
	} else {
		html9 = false;
	}
	if(html9) {
		var _this7 = Argan.args;
		var _2 = __map_reserved["controls"] != null ? _this7.getReserved("controls") : _this7.h["controls"];
		html8 = typeof(_2) == "boolean" ? _2 : _2 != "false";
	} else {
		html8 = true;
	}
	var html10;
	var html11;
	if(Argan.args != null) {
		var _this8 = Argan.args;
		html11 = __map_reserved["playsinline"] != null ? _this8.existsReserved("playsinline") : _this8.h.hasOwnProperty("playsinline");
	} else {
		html11 = false;
	}
	if(html11) {
		var _this9 = Argan.args;
		var _3 = __map_reserved["playsinline"] != null ? _this9.getReserved("playsinline") : _this9.h["playsinline"];
		html10 = typeof(_3) == "boolean" ? _3 : _3 != "false";
	} else {
		html10 = true;
	}
	var html12 = head.join("\n");
	var html13 = body.join("\n");
	var html14 = error != null ? "<pre>uapi error:\n" + error + "</pre>" : haxe_Resource.getString("controls_template");
	var html15 = html.execute({ uri : html1, loading : html2, title : player, doc_title : html3, title_version : version, title_href : last_src, attr_autoplay : html4, attr_muted : html6, attr_controls : html8, attr_playsinline : html10, head : html12, body : html13, controls : html14},{ poster : function(resolve) {
		var canvasDataURL = Main.generatePosterImage(uri,player.toUpperCase());
		var split1 = canvasDataURL.split(",");
		var retval = Object.prototype.hasOwnProperty.call(window,"Blob") ? URL.createObjectURL(new Blob([haxe_crypto_Base64.decode(split1[1]).b.bufferValue],{ type : split1[0].split(";")[0]})) : canvasDataURL;
		return "poster=\"" + retval + "\"";
	}});
	var container = window.document.createElement("div");
	container.style.position = "relative";
	container.style.width = "100%";
	container.style.height = error != null ? "44px" : "0";
	container.style.boxSizing = "unset";
	iframe.id = iframe.name = "uapi.js/" + player + "(" + version + ")/" + Main.id++;
	iframe.style.position = "absolute";
	iframe.style.resize = "both";
	iframe.style.top = iframe.style.left = "0";
	iframe.style.width = iframe.style.height = "100%";
	container.appendChild(iframe);
	parent.appendChild(container);
	var retval1 = new Promise(function(resolve1,reject) {
		var iframe_loaded = false;
		var delayed_errors = [];
		iframe.addEventListener("load",function(event) {
			iframe_loaded = true;
			while(delayed_errors.length > 0) (delayed_errors.pop())();
			var hndl = null;
			hndl = { reload : function(uri1,version1,config) {
				if(version1 == null) {
					version1 = player_version_string;
				}
				if(config == null) {
					config = player_config;
				}
				hndl.frame.parentElement.parentElement.removeChild(hndl.frame.parentElement);
				return Main.writePlayer(parent,uri1,version1,config,inject_head,inject_body).catch(function(e) {
					hndl.frame = e.target.frameElement;
					return hndl;
				}).then(function(nframe) {
					var _g4 = 0;
					var _g12 = Reflect.fields(nframe);
					while(_g4 < _g12.length) {
						var k = _g12[_g4];
						++_g4;
						hndl[k] = Reflect.field(nframe,k);
					}
					return nframe;
				});
			}, destroy : function() {
				iframe.parentElement.parentElement.removeChild(iframe.parentElement);
				hndl = null;
			}, frame : iframe, player : Reflect.field(iframe.contentWindow,"player"), video : Reflect.field(iframe.contentWindow,"video"), controls_custom : Reflect.field(iframe.contentWindow,"controls_custom")};
			var vview = Reflect.field(window,"vview");
			if(vview != null) {
				var h = Reflect.field(vview,"frameAdded");
				h.apply(vview,[]);
			}
			resolve1(hndl);
		});
		var topWindow = window;
		var handleError = null;
		var messageCount = 0;
		handleError = function(error1,message,$window,logToConsole) {
			if(logToConsole == null) {
				logToConsole = true;
			}
			var handleError1;
			var handleError2;
			if(Argan.args != null) {
				var _this10 = Argan.args;
				handleError2 = __map_reserved["quiet"] != null ? _this10.existsReserved("quiet") : _this10.h.hasOwnProperty("quiet");
			} else {
				handleError2 = false;
			}
			if(handleError2) {
				var _this11 = Argan.args;
				var _4 = __map_reserved["quiet"] != null ? _this11.getReserved("quiet") : _this11.h["quiet"];
				handleError1 = typeof(_4) == "boolean" ? _4 : _4 != "false";
			} else {
				handleError1 = false;
			}
			if(handleError1) {
				return;
			}
			if(iframe_loaded) {
				var msg = $window.document.createElement("div");
				msg.className = "message";
				message = StringTools.replace(message,"\\n","\n");
				msg.innerText += "ðŸ’¬ " + message + "\n";
				$window.document.getElementById("error").appendChild(msg);
				if(logToConsole) {
					topWindow.console.error(error1);
				}
				var handleError3 = messageCount += 1;
				$window.messagecount.innerText = "" + handleError3 + " message" + (messageCount > 1 ? "s" : "");
				$window.resetControlsHeight();
				$window.resetAspectRatio();
			} else {
				var f = handleError;
				var a1 = error1;
				var a2 = message;
				var a3 = $window;
				var a4 = logToConsole;
				var handleError4 = function() {
					f(a1,a2,a3,a4);
				};
				delayed_errors.push(handleError4);
			}
		};
		var iframe1 = iframe;
		iframe1.hook = function(contentWindow) {
			contentWindow.config = player_config != null ? Reflect.field(player_config,player) : player_config;
			contentWindow.addEventListener("error",function(e1) {
				if(e1.message != "ResizeObserver loop limit exceeded") {
					reject(e1);
					handleError(e1,"error.message:" + e1.message + ", " + e1.filename + ":" + e1.lineno,contentWindow);
				}
			});
			contentWindow.onunhandledrejection = function(e2) {
				reject(e2);
				var retval2 = e2.reason.toString();
				handleError(e2,retval2,contentWindow);
			};
			uapi_Hooks.hookMethods(contentWindow.console,["error","warn"]).pipe(function(method,args) {
				handleError(args,"console." + method + ":\t" + Std.string(args),contentWindow,false);
			});
		};
		iframe1.hook_end = function(contentWindow1,video) {
			contentWindow1.messagecount.addEventListener("click",function(event1) {
				event1.target.parentElement.classList.toggle("folded");
				contentWindow1.resetControlsHeight();
				contentWindow1.resetAspectRatio();
			});
			video.addEventListener("error",function(e3) {
				window["lastError"] = video.error;
				var msg1;
				switch(video.error.code) {
				case 1:
					msg1 = "MEDIA_ERR_ABORTED";
					break;
				case 2:
					msg1 = "MEDIA_ERR_NETWORK";
					break;
				case 3:
					msg1 = "MEDIA_ERR_DECODE";
					break;
				case 4:
					msg1 = "MEDIA_ERR_SRC_NOT_SUPPORTED";
					break;
				case 5:
					msg1 = "MEDIA_ERR_ENCRYPTED";
					break;
				default:
					msg1 = "UNKNOWN";
				}
				if(Reflect.field(video.error,"message") != null) {
					msg1 += "\nMediaError.message: " + Std.string(Reflect.field(video.error,"message"));
				}
				var log = "HTMLMediaElement MediaError while playing\n" + uri + "\n\n" + msg1 + "\n\nsee\nhttps://developer.mozilla.org/en-US/docs/Web/API/MediaError for more details";
				handleError(e3,log,contentWindow1);
				if(player != "native" && !Object.prototype.hasOwnProperty.call(contentWindow1,"player")) {
					throw new js__$Boot_HaxeError("unable to load " + player_version_string);
				}
			});
		};
	});
	if(uapi_JsUtils.isIE()) {
		var doc = iframe.contentWindow != null ? iframe.contentWindow : iframe.contentDocument;
		if(doc.document) {
			doc = doc.document;
		}
		doc.open();
		doc.write(html15);
		doc.close();
	} else if(Object.prototype.hasOwnProperty.call(window,"Blob")) {
		iframe.setAttribute("sandbox","allow-scripts allow-same-origin allow-modals");
		var tmp = haxe_io_Bytes.ofString(html15).b.bufferValue;
		iframe.src = URL.createObjectURL(new Blob([tmp],{ type : "text/html"}));
	} else {
		var tmp1 = "javascript:atob(\"" + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(html15));
		iframe.src = tmp1 + "\");";
	}
	return retval1;
};
Main.handleEitherType = function(either,array) {
	if(typeof(either) == "string") {
		array.push(either);
	} else if(either != null) {
		var arr = ((either) instanceof Array) ? either : [either];
		var _g = 0;
		while(_g < arr.length) {
			var el = arr[_g];
			++_g;
			var pos = Object.prototype.hasOwnProperty.call(el,"index") && el.index == null;
			array.splice(pos ? el.index : -1,0,el.content);
		}
	}
};
Main.HashPipe = function(immediate) {
	return Main.HashPipeJs(immediate);
};
Main.HashPipeJs = function(immediate) {
	if(immediate == null) {
		immediate = false;
	}
	return { pipe : function(func) {
		var retval = uapi_Hooks.HashPipe(immediate).pipe(function(data) {
			var retval1 = Main.mapToDynamic(data.args);
			func({ args : retval1, values : data.values, update : function(args,values,rewrite,toggle) {
				data.update(Main.dynamicToMap(args),values,rewrite,toggle,true);
			}});
		});
		var _hx_func = retval.update;
		var _hx_args = retval.args();
		retval.args = function() {
			return Main.mapToDynamic(_hx_args);
		};
		retval.update = function(args1,values1,rewrite1,toggle1) {
			var tmp = Main.dynamicToMap(args1);
			_hx_func(tmp,values1,rewrite1,toggle1);
		};
		return retval;
	}};
};
Main.KeyValueStringParser = function(location,QueryString) {
	return Main.KeyValueStringParserJs(location,QueryString);
};
Main.KeyValueStringParserJs = function(location,QueryString) {
	if(QueryString == null) {
		QueryString = true;
	}
	return Main.mapToDynamic(uapi_Utils.KeyValueStringParser(location,QueryString));
};
Main.Version = function() {
	return "stable-49-g354c9f4, 2020-03-13 16:20:56";
};
Main.write = function(str) {
	uapi_JsUtils.write(str);
};
Main.loadScript = function(str) {
	uapi_JsUtils.loadScript(str);
};
Main.absUrl = function(url) {
	var abs = window.document.createElement("a");
	abs.href = url;
	return abs.href;
};
Main.requestUrl = function(url,binary,method,headers,body) {
	return uapi_JsUtils.HttpRequest(url,binary,method,headers,body);
};
Main.dynamicToMap = function(object) {
	var retval = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(object);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		var value = Reflect.field(object,f);
		if(__map_reserved[f] != null) {
			retval.setReserved(f,value);
		} else {
			retval.h[f] = value;
		}
	}
	return retval;
};
Main.mapToDynamic = function(map) {
	var retval = { };
	var k = map.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		retval[k1] = __map_reserved[k1] != null ? map.getReserved(k1) : map.h[k1];
	}
	return retval;
};
Main.generatePosterImage = function(uri,title) {
	var canvas = window.document.createElement("canvas");
	canvas.width = 720;
	canvas.height = 404;
	var ctx = canvas.getContext("2d");
	ctx.font = "bold 55pt sans-serif";
	ctx.fillStyle = "#333";
	ctx.textAlign = "center";
	ctx.fillText(title.toUpperCase(),360,200);
	ctx.font = "italic 12pt sans-serif";
	ctx.fillText(uri,360,250);
	return canvas.toDataURL();
};
Main.prototype = {
	hooks: null
	,__class__: Main
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
var _$Xml_XmlType_$Impl_$ = {};
$hxClasses["_Xml.XmlType_Impl_"] = _$Xml_XmlType_$Impl_$;
_$Xml_XmlType_$Impl_$.__name__ = "_Xml.XmlType_Impl_";
_$Xml_XmlType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,remove: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		this.attributeMap.remove(att);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.attributeMap.keys();
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.listNames = function() {
	var _g = [];
	var _g1 = 0;
	var _g2 = haxe_Resource.content;
	while(_g1 < _g2.length) {
		var x = _g2[_g1];
		++_g1;
		_g.push(x.name);
	}
	return _g;
};
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe__$Template_TemplateExpr = $hxEnums["haxe._Template.TemplateExpr"] = { __ename__ : true, __constructs__ : ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"]
	,OpVar: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,OpExpr: ($_=function(expr) { return {_hx_index:1,expr:expr,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr"],$_)
	,OpIf: ($_=function(expr,eif,eelse) { return {_hx_index:2,expr:expr,eif:eif,eelse:eelse,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","eif","eelse"],$_)
	,OpStr: ($_=function(str) { return {_hx_index:3,str:str,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["str"],$_)
	,OpBlock: ($_=function(l) { return {_hx_index:4,l:l,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["l"],$_)
	,OpForeach: ($_=function(expr,loop) { return {_hx_index:5,expr:expr,loop:loop,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","loop"],$_)
	,OpMacro: ($_=function(name,params) { return {_hx_index:6,name:name,params:params,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["name","params"],$_)
};
var haxe_Template = function(str) {
	var tokens = this.parseTokens(str);
	this.expr = this.parseBlock(tokens);
	if(!tokens.isEmpty()) {
		throw new js__$Boot_HaxeError("Unexpected '" + Std.string(tokens.first().s) + "'");
	}
};
$hxClasses["haxe.Template"] = haxe_Template;
haxe_Template.__name__ = "haxe.Template";
haxe_Template.prototype = {
	expr: null
	,context: null
	,macros: null
	,stack: null
	,buf: null
	,execute: function(context,macros) {
		this.macros = macros == null ? { } : macros;
		this.context = context;
		this.stack = new haxe_ds_List();
		this.buf = new StringBuf();
		this.run(this.expr);
		return this.buf.b;
	}
	,resolve: function(v) {
		if(v == "__current__") {
			return this.context;
		}
		var value = Reflect.getProperty(this.context,v);
		if(value != null || Object.prototype.hasOwnProperty.call(this.context,v)) {
			return value;
		}
		var _g_head = this.stack.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var ctx = val;
			value = Reflect.getProperty(ctx,v);
			if(value != null || Object.prototype.hasOwnProperty.call(ctx,v)) {
				return value;
			}
		}
		return Reflect.field(haxe_Template.globals,v);
	}
	,parseTokens: function(data) {
		var tokens = new haxe_ds_List();
		while(haxe_Template.splitter.match(data)) {
			var p = haxe_Template.splitter.matchedPos();
			if(p.pos > 0) {
				tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			}
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = haxe_Template.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			var params = [];
			var part = "";
			while(true) {
				var c = HxOverrides.cca(data,parp);
				++parp;
				if(c == 40) {
					++npar;
				} else if(c == 41) {
					--npar;
					if(npar <= 0) {
						break;
					}
				} else if(c == null) {
					throw new js__$Boot_HaxeError("Unclosed macro parenthesis");
				}
				if(c == 44 && npar == 1) {
					params.push(part);
					part = "";
				} else {
					part += String.fromCodePoint(c);
				}
			}
			params.push(part);
			tokens.add({ p : haxe_Template.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) {
			tokens.add({ p : data, s : true, l : null});
		}
		return tokens;
	}
	,parseBlock: function(tokens) {
		var l = new haxe_ds_List();
		while(true) {
			var t = tokens.first();
			if(t == null) {
				break;
			}
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) {
				break;
			}
			l.add(this.parse(tokens));
		}
		if(l.length == 1) {
			return l.first();
		}
		return haxe__$Template_TemplateExpr.OpBlock(l);
	}
	,parse: function(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) {
			return haxe__$Template_TemplateExpr.OpStr(p);
		}
		if(t.l != null) {
			var pe = new haxe_ds_List();
			var _g = 0;
			var _g1 = t.l;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				pe.add(this.parseBlock(this.parseTokens(p1)));
			}
			return haxe__$Template_TemplateExpr.OpMacro(p,pe);
		}
		var kwdEnd = function(kwd) {
			var pos = -1;
			var length = kwd.length;
			if(HxOverrides.substr(p,0,length) == kwd) {
				pos = length;
				var _g_offset = 0;
				var _g_s = HxOverrides.substr(p,length,null);
				while(_g_offset < _g_s.length) {
					var c = _g_s.charCodeAt(_g_offset++);
					if(c == 32) {
						++pos;
					} else {
						break;
					}
				}
			}
			return pos;
		};
		var pos1 = kwdEnd("if");
		if(pos1 > 0) {
			p = HxOverrides.substr(p,pos1,p.length - pos1);
			var e = this.parseExpr(p);
			var eif = this.parseBlock(tokens);
			var t1 = tokens.first();
			var eelse;
			if(t1 == null) {
				throw new js__$Boot_HaxeError("Unclosed 'if'");
			}
			if(t1.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t1.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t1 = tokens.pop();
				if(t1 == null || t1.p != "end") {
					throw new js__$Boot_HaxeError("Unclosed 'else'");
				}
			} else {
				t1.p = HxOverrides.substr(t1.p,4,t1.p.length - 4);
				eelse = this.parse(tokens);
			}
			return haxe__$Template_TemplateExpr.OpIf(e,eif,eelse);
		}
		var pos2 = kwdEnd("foreach");
		if(pos2 >= 0) {
			p = HxOverrides.substr(p,pos2,p.length - pos2);
			var e1 = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t2 = tokens.pop();
			if(t2 == null || t2.p != "end") {
				throw new js__$Boot_HaxeError("Unclosed 'foreach'");
			}
			return haxe__$Template_TemplateExpr.OpForeach(e1,efor);
		}
		if(haxe_Template.expr_splitter.match(p)) {
			return haxe__$Template_TemplateExpr.OpExpr(this.parseExpr(p));
		}
		return haxe__$Template_TemplateExpr.OpVar(p);
	}
	,parseExpr: function(data) {
		var l = new haxe_ds_List();
		var expr = data;
		while(haxe_Template.expr_splitter.match(data)) {
			var p = haxe_Template.expr_splitter.matchedPos();
			var k = p.pos + p.len;
			if(p.pos != 0) {
				l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			}
			var p1 = haxe_Template.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = haxe_Template.expr_splitter.matchedRight();
		}
		if(data.length != 0) {
			var _g_offset = 0;
			var _g_s = data;
			while(_g_offset < _g_s.length) {
				var _g1_key = _g_offset;
				var _g1_value = _g_s.charCodeAt(_g_offset++);
				var i = _g1_key;
				var c = _g1_value;
				if(c != 32) {
					l.add({ p : HxOverrides.substr(data,i,null), s : true});
					break;
				}
			}
		}
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) {
				throw new js__$Boot_HaxeError(l.first().p);
			}
		} catch( s ) {
			var s1 = ((s) instanceof js__$Boot_HaxeError) ? s.val : s;
			if(typeof(s1) == "string") {
				throw new js__$Boot_HaxeError("Unexpected '" + s1 + "' in " + expr);
			} else {
				throw s;
			}
		}
		return function() {
			try {
				return e();
			} catch( exc ) {
				throw new js__$Boot_HaxeError("Error : " + Std.string(((exc) instanceof js__$Boot_HaxeError) ? exc.val : exc) + " in " + expr);
			}
		};
	}
	,makeConst: function(v) {
		haxe_Template.expr_trim.match(v);
		v = haxe_Template.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(haxe_Template.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(haxe_Template.expr_float.match(v)) {
			var f = parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	,makePath: function(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") {
			return e;
		}
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) {
			throw new js__$Boot_HaxeError(field.p);
		}
		var f = field.p;
		haxe_Template.expr_trim.match(f);
		f = haxe_Template.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	,makeExpr: function(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	,skipSpaces: function(l) {
		var p = l.first();
		while(p != null) {
			var _g_offset = 0;
			var _g_s = p.p;
			while(_g_offset < _g_s.length) {
				var c = _g_s.charCodeAt(_g_offset++);
				if(c != 32) {
					return;
				}
			}
			l.pop();
			p = l.first();
		}
	}
	,makeExpr2: function(l) {
		this.skipSpaces(l);
		var p = l.pop();
		this.skipSpaces(l);
		if(p == null) {
			throw new js__$Boot_HaxeError("<eof>");
		}
		if(p.s) {
			return this.makeConst(p.p);
		}
		switch(p.p) {
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				if(v != null) {
					return v == false;
				} else {
					return true;
				}
			};
		case "(":
			this.skipSpaces(l);
			var e1 = this.makeExpr(l);
			this.skipSpaces(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) {
				throw new js__$Boot_HaxeError(p1);
			}
			if(p1.p == ")") {
				return e1;
			}
			this.skipSpaces(l);
			var e2 = this.makeExpr(l);
			this.skipSpaces(l);
			var p2 = l.pop();
			this.skipSpaces(l);
			if(p2 == null || p2.p != ")") {
				throw new js__$Boot_HaxeError(p2);
			}
			switch(p1.p) {
			case "!=":
				return function() {
					return e1() != e2();
				};
			case "&&":
				return function() {
					return e1() && e2();
				};
			case "*":
				return function() {
					return e1() * e2();
				};
			case "+":
				return function() {
					return e1() + e2();
				};
			case "-":
				return function() {
					return e1() - e2();
				};
			case "/":
				return function() {
					return e1() / e2();
				};
			case "<":
				return function() {
					return e1() < e2();
				};
			case "<=":
				return function() {
					return e1() <= e2();
				};
			case "==":
				return function() {
					return e1() == e2();
				};
			case ">":
				return function() {
					return e1() > e2();
				};
			case ">=":
				return function() {
					return e1() >= e2();
				};
			case "||":
				return function() {
					return e1() || e2();
				};
			default:
				throw new js__$Boot_HaxeError("Unknown operation " + p1.p);
			}
			break;
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw new js__$Boot_HaxeError(p.p);
	}
	,run: function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			var _this = this.buf;
			var x = Std.string(this.resolve(v));
			_this.b += Std.string(x);
			break;
		case 1:
			var e1 = e.expr;
			var _this1 = this.buf;
			var x1 = Std.string(e1());
			_this1.b += Std.string(x1);
			break;
		case 2:
			var eelse = e.eelse;
			var eif = e.eif;
			var e2 = e.expr;
			var v1 = e2();
			if(v1 == null || v1 == false) {
				if(eelse != null) {
					this.run(eelse);
				}
			} else {
				this.run(eif);
			}
			break;
		case 3:
			var str = e.str;
			this.buf.b += str == null ? "null" : "" + str;
			break;
		case 4:
			var l = e.l;
			var _g_head = l.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e3 = val;
				this.run(e3);
			}
			break;
		case 5:
			var loop = e.loop;
			var e4 = e.expr;
			var v2 = e4();
			try {
				var x2 = $getIterator(v2);
				if(x2.hasNext == null) {
					throw new js__$Boot_HaxeError(null);
				}
				v2 = x2;
			} catch( e5 ) {
				var e6 = ((e5) instanceof js__$Boot_HaxeError) ? e5.val : e5;
				try {
					if(v2.hasNext == null) {
						throw new js__$Boot_HaxeError(null);
					}
				} catch( e7 ) {
					var e8 = ((e7) instanceof js__$Boot_HaxeError) ? e7.val : e7;
					throw new js__$Boot_HaxeError("Cannot iter on " + Std.string(v2));
				}
			}
			this.stack.push(this.context);
			var v3 = v2;
			var ctx = v3;
			while(ctx.hasNext()) {
				var ctx1 = ctx.next();
				this.context = ctx1;
				this.run(loop);
			}
			this.context = this.stack.pop();
			break;
		case 6:
			var params = e.params;
			var m = e.name;
			var v4 = Reflect.field(this.macros,m);
			var pl = [];
			var old = this.buf;
			pl.push($bind(this,this.resolve));
			var _g_head1 = params.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var p = val1;
				if(p._hx_index == 0) {
					var v5 = p.v;
					pl.push(this.resolve(v5));
				} else {
					this.buf = new StringBuf();
					this.run(p);
					pl.push(this.buf.b);
				}
			}
			this.buf = old;
			try {
				var _this2 = this.buf;
				var x3 = Std.string(v4.apply(this.macros,pl));
				_this2.b += Std.string(x3);
			} catch( e9 ) {
				var e10 = ((e9) instanceof js__$Boot_HaxeError) ? e9.val : e9;
				var plstr;
				try {
					plstr = pl.join(",");
				} catch( e11 ) {
					var e12 = ((e11) instanceof js__$Boot_HaxeError) ? e11.val : e11;
					plstr = "???";
				}
				var msg = "Macro call " + m + "(" + plstr + ") failed (" + Std.string(e10) + ")";
				throw new js__$Boot_HaxeError(msg);
			}
			break;
		}
	}
	,__class__: haxe_Template
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c11 << 2 | c2 >> 4;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c12 << 2 | c21 >> 4;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = c21 << 4 | c31 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g2 = 0;
		var _g3 = this.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var c = this.b[i1];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.prototype = {
	h: null
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
			}
			throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input2 = StringTools.trim(commentContent);
			this.output.b += Std.string(input2);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(child1.nodeType));
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var uapi_Hooks = $hx_exports["uapi"]["hooks"] = function() { };
$hxClasses["uapi.Hooks"] = uapi_Hooks;
uapi_Hooks.__name__ = "uapi.Hooks";
uapi_Hooks.hookMethod = function(object,methodPath) {
	var method_original = null;
	var pipe = null;
	var retval = { pipe : function(func) {
		pipe = func;
	}};
	var sub_obj = methodPath.split(".");
	var methodName = sub_obj.pop();
	var _g = 0;
	while(_g < sub_obj.length) {
		var sub = sub_obj[_g];
		++_g;
		object = Reflect.getProperty(object,sub);
	}
	method_original = Reflect.getProperty(object,methodName);
	if(null != method_original) {
		var method_new = uapi_Hooks.makeVarArgs(function($arguments) {
			var pipe_ret;
			if(pipe != null) {
				var o = this;
				var func1 = method_original;
				var args = [$arguments,function(args1) {
					return func1.apply(o,args1);
				}];
				pipe_ret = pipe.apply(this,args);
			} else {
				pipe_ret = null;
			}
			if(pipe_ret != null) {
				if(Object.prototype.hasOwnProperty.call(pipe_ret,"arguments")) {
					$arguments = Reflect.field(pipe_ret,"arguments");
				} else {
					return pipe_ret;
				}
			}
			return method_original.apply(this,$arguments);
		});
		Reflect.setProperty(object,methodName,method_new);
	} else {
		throw new js__$Boot_HaxeError("" + methodName + "() does not exist on " + Std.string(object));
	}
	return retval;
};
uapi_Hooks.hookMethods = function(object,methods) {
	var pipe = null;
	var retval = { pipe : function(func) {
		pipe = func;
	}};
	var _g = 0;
	while(_g < methods.length) {
		var m = [methods[_g]];
		++_g;
		uapi_Hooks.hookMethod(object,m[0]).pipe((function(m1) {
			return function($arguments,method_original) {
				return pipe.apply(this,[m1[0],$arguments,method_original]);
			};
		})(m));
	}
	return retval;
};
uapi_Hooks.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f.apply(this,[a]);
	};
};
uapi_Hooks.HashPipe = function(immediate) {
	if(immediate == null) {
		immediate = false;
	}
	var pipe = null;
	var _args = new haxe_ds_StringMap();
	var _values = [];
	var updateHash = function(args,values,rewrite,toggle,replacestate) {
		if(toggle == null) {
			toggle = true;
		}
		if(rewrite == null) {
			rewrite = false;
		}
		if(args != null) {
			if(rewrite) {
				if(args != null) {
					_args = args;
				}
				if(values != null) {
					_values = values;
				}
			} else {
				var k = args.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					if(toggle && (__map_reserved[k1] != null ? args.getReserved(k1) : args.h[k1]) == "") {
						args.remove(k1);
					} else {
						var value = __map_reserved[k1] != null ? args.getReserved(k1) : args.h[k1];
						if(__map_reserved[k1] != null) {
							_args.setReserved(k1,value);
						} else {
							_args.h[k1] = value;
						}
					}
				}
				if(values != null) {
					var _g = 0;
					while(_g < values.length) {
						var v = values[_g];
						++_g;
						var str = v == null ? "null" : "" + v;
						if(_values.indexOf(str) == -1) {
							_values.push(str);
						} else if(toggle) {
							_values.splice(_values.indexOf(str),1);
						}
					}
				}
			}
			var _g1 = 0;
			while(_g1 < _values.length) {
				var v1 = _values[_g1];
				++_g1;
				v1 = encodeURIComponent(v1);
			}
			var k2 = _args.keys();
			while(k2.hasNext()) {
				var k3 = k2.next();
				var s = __map_reserved[k3] != null ? _args.getReserved(k3) : _args.h[k3];
				var updateHash1 = "" + k3 + "=" + encodeURIComponent(s);
				_values.push(updateHash1);
			}
			var updated_hash = "!/" + _values.join("/");
			if(replacestate) {
				window.history.replaceState(null,null,"#" + updated_hash);
			} else {
				window.location.hash = updated_hash;
			}
		}
	};
	var hashChange = function(e) {
		var hash = window.location.hash;
		var toggle_arguments = [];
		if(pipe != null) {
			_args = uapi_Utils.KeyValueStringParser(hash,false);
		}
		var k4 = _args.keys();
		while(k4.hasNext()) {
			var k5 = k4.next();
			if((__map_reserved[k5] != null ? _args.getReserved(k5) : _args.h[k5]) == null) {
				_args.remove(k5);
				toggle_arguments.push(k5);
			}
		}
		_values = toggle_arguments;
		pipe({ update : updateHash, args : _args, values : _values});
	};
	var retval = { pipe : function(func) {
		pipe = func;
		if(immediate) {
			hashChange();
		}
		return { args : function() {
			return _args;
		}, values : function() {
			return _values;
		}, update : updateHash};
	}};
	window.addEventListener("hashchange",hashChange);
	return retval;
};
var uapi_JsUtils = function() { };
$hxClasses["uapi.JsUtils"] = uapi_JsUtils;
uapi_JsUtils.__name__ = "uapi.JsUtils";
uapi_JsUtils.HttpRequest = function(url,binary,method,headers,body) {
	if(method == null) {
		method = "GET";
	}
	if(binary == null) {
		binary = false;
	}
	var pipe = null;
	var retval = { pipe : function(func) {
		pipe = func;
	}};
	window.fetch(url,{ "credentials" : "omit", "headers" : headers, "referrerPolicy" : "no-referrer-when-downgrade", "body" : body, "method" : method, "mode" : "cors"}).then(function(response) {
		var p = binary ? response.arrayBuffer() : response.text();
		p.then(function(res) {
			if(pipe != null) {
				pipe(res);
			}
		});
	});
	return retval;
};
uapi_JsUtils.write = function(str) {
	var last = window.document.body.lastElementChild;
	var it = last;
	while(it != null) {
		it = it.lastElementChild;
		if(it != null) {
			last = it;
		}
	}
	last.parentElement.insertAdjacentHTML("afterbegin",str);
	return;
};
uapi_JsUtils.loadScript = function(src) {
	var pipe = null;
	var retval = { pipe : function(func) {
		pipe = func;
	}};
	var script = window.document.createElement("script");
	script.type = "text/javascript";
	script.src = src;
	script.defer = true;
	script.async = false;
	script.addEventListener("load",function(e) {
		if(pipe != null) {
			pipe(script);
		}
		return;
	});
	window.document.head.appendChild(script);
	return retval;
};
uapi_JsUtils.AddEventListeners = function(target,fields,func,opt) {
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		target.addEventListener(field,func,opt);
	}
};
uapi_JsUtils.isIE = function() {
	var ua = window.navigator.userAgent;
	if(ua.indexOf("Trident/") <= -1) {
		return ua.indexOf("Edge/") > -1;
	} else {
		return true;
	}
};
var uapi_Utils = function() { };
$hxClasses["uapi.Utils"] = uapi_Utils;
uapi_Utils.__name__ = "uapi.Utils";
uapi_Utils.KeyValueStringParser = function(location,QueryString) {
	if(QueryString == null) {
		QueryString = true;
	}
	if(location == null) {
		location = QueryString ? window.location.search : window.location.hash;
	}
	while(QueryString == true ? location.charAt(0) == "?" : location.charAt(0) == "#" || location.charAt(0) == "!") location = HxOverrides.substr(location,1,null);
	var h = location.split(QueryString ? "&" : "/");
	var retval = new haxe_ds_StringMap();
	var t;
	var _g = 0;
	var _g1 = h.length;
	while(_g < _g1) {
		var l = _g++;
		if(h[l].length > 0) {
			var split = h[l].indexOf("=");
			t = [];
			if(split != -1) {
				t[0] = HxOverrides.substr(h[l],0,split);
				t[1] = HxOverrides.substr(h[l],split + 1,null);
			} else {
				t[0] = h[l];
			}
			var value = t.length > 1 ? decodeURIComponent(t[1].split("+").join(" ")) : null;
			var key = t[0];
			if(__map_reserved[key] != null) {
				retval.setReserved(key,value);
			} else {
				retval.h[key] = value;
			}
		}
	}
	return retval;
};
uapi_Utils.GenerateUUID = $hx_exports["uapi"]["uuid"] = function(prefix) {
	if(prefix == null) {
		prefix = "";
	}
	var t = new Date().getTime();
	var b = new haxe_io_Bytes(new ArrayBuffer(16));
	var c = 1;
	b.b[0] = t * 255 | 0;
	while(c < 16) {
		var v = Math.round(Math.random() * 255);
		b.b[c] = v;
		++c;
	}
	var retval = "" + b.toHex();
	var r = new EReg("(.{7})(.{4})(.{4})(.{4})(.*)","gi");
	if(r.match(retval)) {
		retval = retval.replace(r.r,"$1-$2-$3-$4-$5");
	}
	return "" + prefix + retval;
};
var uapi_ui_Mal = function(container,xml) {
	this.tempElementsCache = null;
	this.addedElements = null;
	this.templates = null;
	this.shadowDom = null;
	this.container = container;
	this.tempElementsCache = new haxe_ds_StringMap();
	if(xml != null) {
		this.parseGui(container,xml);
	}
};
$hxClasses["uapi.ui.Mal"] = uapi_ui_Mal;
uapi_ui_Mal.__name__ = "uapi.ui.Mal";
uapi_ui_Mal.prototype = {
	container: null
	,shadowDom: null
	,templates: null
	,addedElements: null
	,tempElementsCache: null
	,addTemplate: function(name,args,rename,alwaysAppendLast,parentName) {
		if(alwaysAppendLast == null) {
			alwaysAppendLast = false;
		}
		var _gthis = this;
		var _this = this.addedElements;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			window.console.warn("an element with the name:" + name + " already exists, overwriting");
		}
		var _this1 = this.addedElements;
		if(__map_reserved[rename] != null ? _this1.existsReserved(rename) : _this1.h.hasOwnProperty(rename)) {
			window.console.warn("an renamed element with the name:" + rename + " already exists, overwriting");
		}
		var retval = null;
		var _this2 = this.templates;
		var template = __map_reserved[name] != null ? _this2.getReserved(name) : _this2.h[name];
		var append = function(element,parent) {
			var guiElement = { element : element.cloneNode(true), param : new haxe_ds_StringMap()};
			if(args != null) {
				var mapParams = function(param) {
					var paramNode = param;
					var paramEl = param;
					if(paramEl != null) {
						var paramName = paramEl.getAttribute("param");
						paramEl.removeAttribute("param");
						var _g = 0;
						var _g1 = paramName.split(",");
						while(_g < _g1.length) {
							var paramName1 = _g1[_g];
							++_g;
							if(StringTools.startsWith(paramName1,"@")) {
								var parms = new EReg("@(.*):(.*)","");
								if(parms.match(paramName1)) {
									paramName1 = parms.matched(2);
									paramNode = paramEl.getAttributeNode(parms.matched(1));
								}
							}
							var _this3 = guiElement.param;
							if(__map_reserved[paramName1] != null) {
								_this3.setReserved(paramName1,paramNode);
							} else {
								_this3.h[paramName1] = paramNode;
							}
							if(__map_reserved[paramName1] != null ? args.existsReserved(paramName1) : args.h.hasOwnProperty(paramName1)) {
								paramNode.textContent = __map_reserved[paramName1] != null ? args.getReserved(paramName1) : args.h[paramName1];
							}
						}
					}
				};
				var _g2 = 0;
				var _g11 = guiElement.element.querySelectorAll("*[" + "param" + "]");
				while(_g2 < _g11.length) {
					var param1 = _g11[_g2];
					++_g2;
					mapParams(param1);
				}
				if(guiElement.element.hasAttribute("param")) {
					mapParams(guiElement.element);
				}
			}
			if(!alwaysAppendLast && template.index <= parent.children.length) {
				parent.insertBefore(guiElement.element,parent.children[template.index]);
			} else {
				parent.appendChild(guiElement.element);
			}
			var _this4 = _gthis.addedElements;
			if(__map_reserved[name] != null) {
				_this4.setReserved(name,guiElement);
			} else {
				_this4.h[name] = guiElement;
			}
			return guiElement.element;
		};
		var parent1;
		if(parentName == null) {
			parent1 = null;
		} else {
			var _this5 = this.addedElements;
			parent1 = (__map_reserved[parentName] != null ? _this5.getReserved(parentName) : _this5.h[parentName]).element.querySelector("*[" + "data-malhx-template" + "=\"" + template.parentId + "\"]");
		}
		if(template != null) {
			if(rename != null) {
				name = rename;
			}
			var key = template.name;
			var _this6 = this.tempElementsCache;
			var el = __map_reserved[key] != null ? _this6.getReserved(key) : _this6.h[key];
			if(el != null) {
				retval = append(el.element,parent1 != null ? parent1 : el.parent);
				if(args != null) {
					var k = args.keys();
					while(k.hasNext()) {
						var k1 = k.next();
						var _this7 = this.addedElements;
						var _this8 = (__map_reserved[name] != null ? _this7.getReserved(name) : _this7.h[name]).param;
						var el1 = __map_reserved[k1] != null ? _this8.getReserved(k1) : _this8.h[k1];
						if(el1 != null) {
							el1.textContent = __map_reserved[k1] != null ? args.getReserved(k1) : args.h[k1];
						}
					}
				}
				return retval;
			}
			var parentSelector = "*[" + "data-malhx-template" + "=\"" + template.parentId + "\"]";
			if(parent1 == null) {
				parent1 = this.container.querySelector(parentSelector);
			}
			if(parent1 != null) {
				var tempParent = this.shadowDom.querySelector(parentSelector);
				if(tempParent != null) {
					tempParent.innerHTML += haxe_xml_Printer.print(template.xml);
					if(tempParent.children.length > 0) {
						var key1 = template.name;
						var value = { element : tempParent.lastElementChild, parent : parent1};
						var _this9 = this.tempElementsCache;
						if(__map_reserved[key1] != null) {
							_this9.setReserved(key1,value);
						} else {
							_this9.h[key1] = value;
						}
						retval = append(tempParent.lastElementChild,parent1);
					}
				} else {
					throw new js__$Boot_HaxeError("" + parentSelector + "\" is not in shadowDom");
				}
			} else {
				throw new js__$Boot_HaxeError("" + parentSelector + "\" is not in DOMTree");
			}
		} else {
			throw new js__$Boot_HaxeError("template " + name + " not found");
		}
		return retval;
	}
	,parseGui: function(container,rootNode) {
		if(rootNode.nodeType != 0) {
			throw new js__$Boot_HaxeError("expected rootNode to be an XmlType Element");
		}
		this.templates = new haxe_ds_StringMap();
		this.addedElements = new haxe_ds_StringMap();
		var att = rootNode.get("template");
		var count = 0;
		var sub = rootNode.elements();
		while(sub.hasNext()) {
			var sub1 = sub.next();
			var index = count++;
			if(index == null) {
				index = 0;
			}
			var att1 = sub1.get("template");
			var count1 = 0;
			var sub2 = sub1.elements();
			while(sub2.hasNext()) {
				var sub3 = sub2.next();
				this.shake(sub3,count1++);
			}
			if(att1 != null) {
				var parent = sub1.parent;
				var uuid;
				if(parent.exists("data-malhx-template")) {
					uuid = parent.get("data-malhx-template");
				} else {
					uuid = uapi_Utils.GenerateUUID();
					parent.set("data-malhx-template",uuid);
				}
				var name = att1;
				var _this = this.templates;
				if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
					throw new js__$Boot_HaxeError("duplicate template name (" + name + ") found, aborting");
				}
				var _this1 = this.templates;
				var value = { name : name, xml : sub1, parentId : uuid, index : index};
				if(__map_reserved[name] != null) {
					_this1.setReserved(name,value);
				} else {
					_this1.h[name] = value;
				}
			}
		}
		if(att != null) {
			var parent1 = rootNode.parent;
			var uuid1;
			if(parent1.exists("data-malhx-template")) {
				uuid1 = parent1.get("data-malhx-template");
			} else {
				uuid1 = uapi_Utils.GenerateUUID();
				parent1.set("data-malhx-template",uuid1);
			}
			var name1 = att;
			var _this2 = this.templates;
			if(__map_reserved[name1] != null ? _this2.existsReserved(name1) : _this2.h.hasOwnProperty(name1)) {
				throw new js__$Boot_HaxeError("duplicate template name (" + name1 + ") found, aborting");
			}
			var _this3 = this.templates;
			var value1 = { name : name1, xml : rootNode, parentId : uuid1, index : 0};
			if(__map_reserved[name1] != null) {
				_this3.setReserved(name1,value1);
			} else {
				_this3.h[name1] = value1;
			}
		}
		this.shadowDom = window.document.createElement("div");
		this.shadowDom.innerHTML = haxe_xml_Printer.print(rootNode);
		var sub4 = rootNode.elements();
		while(sub4.hasNext()) {
			var sub5 = sub4.next();
			var sub6 = sub5.elements();
			while(sub6.hasNext()) {
				var sub7 = sub6.next();
				this.cleanupTemplateNodes(sub7);
			}
			var att2 = sub5.attributes();
			while(att2.hasNext()) {
				var att3 = att2.next();
				if(att3 == "template") {
					sub5.remove("template");
					sub5.parent.removeChild(sub5);
				}
			}
		}
		var att4 = rootNode.attributes();
		while(att4.hasNext()) {
			var att5 = att4.next();
			if(att5 == "template") {
				rootNode.remove("template");
				rootNode.parent.removeChild(rootNode);
			}
		}
		var tmp = window.document.createElement("div");
		tmp.innerHTML = haxe_xml_Printer.print(rootNode);
		var _g = 0;
		var _g1 = tmp.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			container.appendChild(tmp.removeChild(child));
		}
		tmp = null;
	}
	,shake: function(rootNode,index) {
		if(index == null) {
			index = 0;
		}
		var att = rootNode.get("template");
		var count = 0;
		var sub = rootNode.elements();
		while(sub.hasNext()) {
			var sub1 = sub.next();
			this.shake(sub1,count++);
		}
		if(att != null) {
			var parent = rootNode.parent;
			var uuid;
			if(parent.exists("data-malhx-template")) {
				uuid = parent.get("data-malhx-template");
			} else {
				uuid = uapi_Utils.GenerateUUID();
				parent.set("data-malhx-template",uuid);
			}
			var name = att;
			var _this = this.templates;
			if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
				throw new js__$Boot_HaxeError("duplicate template name (" + name + ") found, aborting");
			}
			var _this1 = this.templates;
			var value = { name : name, xml : rootNode, parentId : uuid, index : index};
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,value);
			} else {
				_this1.h[name] = value;
			}
		}
	}
	,cleanupTemplateNodes: function(rootNode) {
		var sub = rootNode.elements();
		while(sub.hasNext()) {
			var sub1 = sub.next();
			this.cleanupTemplateNodes(sub1);
		}
		var att = rootNode.attributes();
		while(att.hasNext()) {
			var att1 = att.next();
			if(att1 == "template") {
				rootNode.remove("template");
				rootNode.parent.removeChild(rootNode);
			}
		}
	}
	,__class__: uapi_ui_Mal
};
var uapi_ui_Timeline = $hx_exports["uapi"]["timeline"] = function(parent,timelineLength,maxSelectors,updateTextCb,resizable,defaultLength) {
	if(defaultLength == null) {
		defaultLength = 15;
	}
	if(resizable == null) {
		resizable = false;
	}
	this.tl = null;
	this.timelineLength = null;
	this.defaultLength = null;
	this.resizable = null;
	this.updateTextCb = null;
	this.innerOffsetX = null;
	this.timepoints = [];
	var _gthis = this;
	var _this = this.SRC();
	if(_this.nodeType != Xml.Document && _this.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(_this.nodeType));
	}
	var mal = new uapi_ui_Mal(parent,_this.children[0]);
	this.updateTextCb = updateTextCb;
	this.resizable = resizable;
	this.defaultLength = defaultLength;
	this.timelineLength = timelineLength;
	if(maxSelectors == null) {
		maxSelectors = 6;
	}
	this.tl = mal.addTemplate("timeline_base").getElementsByClassName("timeline")[0].firstElementChild;
	this.tl.addEventListener("click",function(e) {
		if(!uapi_ui_Timeline.dragging && e.target == _gthis.tl && _gthis.timepoints.length < maxSelectors) {
			var tlrect = _gthis.tl.getBoundingClientRect();
			_gthis.createTimePoint(e.clientX - tlrect.left - _gthis.innerOffsetX,defaultLength);
		}
	});
	window.addEventListener("resize",function(e1) {
		var tlrect1 = _gthis.tl.getBoundingClientRect();
		var _g = 0;
		var _g1 = _gthis.timepoints;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.el.style.width = "" + tlrect1.width / timelineLength * t.pos.duration + "px";
			_gthis.updateTimePoint(t.el,t.pos,false,tlrect1.width * (t.pos.start / timelineLength),false);
		}
	});
	var tlrect2 = this.tl.getBoundingClientRect();
	this.innerOffsetX = this.defaultLength / timelineLength * tlrect2.width / 2;
};
$hxClasses["uapi.ui.Timeline"] = uapi_ui_Timeline;
uapi_ui_Timeline.__name__ = "uapi.ui.Timeline";
uapi_ui_Timeline.prototype = {
	timepoints: null
	,innerOffsetX: null
	,updateTextCb: null
	,resizable: null
	,defaultLength: null
	,timelineLength: null
	,tl: null
	,createGrabbable: function(el,callback) {
		var $window = window;
		uapi_JsUtils.AddEventListeners(el,["mouseleave","mouseover","mousedown","mouseup"],function(e) {
			if(e.type == "mousedown") {
				uapi_ui_Timeline.dragging = true;
				el.style.cursor = "grabbing";
				$window.addEventListener("mouseup",function(e1) {
					el.style.cursor = "grab";
					$window.removeEventListener("mousemove",callback);
					callback(e1);
					return false;
				},{ once : true});
				$window.addEventListener("mousemove",callback);
			}
			if(e.type == "mouseup") {
				uapi_ui_Timeline.dragging = false;
				return false;
			}
			callback(e);
			return false;
		});
	}
	,updateTimePoint: function(tp,pos,allowOverlap,offsetX,updateStart) {
		if(updateStart == null) {
			updateStart = true;
		}
		var tlrect = this.tl.getBoundingClientRect();
		var tprect = tp.getBoundingClientRect();
		var lowerLimit = 0;
		var upperLimit = tlrect.width;
		if(!allowOverlap) {
			var _g = 0;
			var _g1 = this.timepoints;
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				if(t.pos != pos) {
					var trect = t.el.getBoundingClientRect();
					if(offsetX < trect.right - tlrect.left && offsetX > trect.left - tlrect.left) {
						offsetX = trect.right - tlrect.left;
						break;
					}
					if(offsetX + this.innerOffsetX + tprect.width > trect.left - tlrect.left && offsetX + this.innerOffsetX + tprect.width < trect.right - tlrect.left) {
						offsetX = trect.left - tprect.width - tlrect.left;
						break;
					}
				}
			}
		}
		if(offsetX < lowerLimit) {
			offsetX = lowerLimit;
		}
		if(offsetX + tprect.width > upperLimit) {
			offsetX = upperLimit - tprect.width;
		}
		if(pos.duration < this.timelineLength) {
			tp.style.marginLeft = "" + offsetX + "px";
			this.updateTimePointData(tp,pos,updateStart);
		}
	}
	,updateTimePointData: function(tp,tr,updateStart) {
		if(updateStart == null) {
			updateStart = true;
		}
		var label = tp.getElementsByTagName("span")[0];
		var rect = tp.getBoundingClientRect();
		var tlrect = this.tl.getBoundingClientRect();
		if(updateStart) {
			tr.start = (rect.left - tlrect.left) / tlrect.width * this.timelineLength;
		}
		tr.end = tr.start + tr.duration;
		if(this.timelineLength - tr.end < .33) {
			if(updateStart) {
				tr.start = this.timelineLength - tr.duration;
			}
			tr.end = this.timelineLength;
			tr.duration = tr.end - tr.start;
		}
		if(this.updateTextCb != null) {
			label.innerHTML = this.updateTextCb(tr);
		} else {
			label.innerHTML = tr.start.toFixed(2) + "<br>";
			label.innerHTML += tr.end.toFixed(2);
		}
		return false;
	}
	,createTimePoint: function(start,length,overlap) {
		if(overlap == null) {
			overlap = false;
		}
		var _gthis = this;
		if(length == null) {
			length = this.defaultLength;
		}
		var tp = window.document.createElement("div");
		var pos = { start : start, end : length, duration : length};
		var tlrect = this.tl.getBoundingClientRect();
		tp.className = "point";
		tp.tabIndex = 0;
		var f = $bind(this,this.updateTimePoint);
		var tp1 = tp;
		var pos1 = pos;
		var allowOverlap = overlap;
		var tmp = function(offsetX) {
			f(tp1,pos1,allowOverlap,offsetX);
		};
		var f1 = $bind(this,this.deleteTimePoint);
		var pos2 = pos;
		var tmp1 = function() {
			f1(pos2);
		};
		this.timepoints.push({ pos : pos, el : tp, updateTimePoint : tmp, 'delete' : tmp1});
		tp.style.width = "" + tlrect.width / this.timelineLength * length + "px";
		if(this.resizable) {
			var hndl_r = window.document.createElement("div");
			hndl_r.className = "grabber";
			this.createGrabbable(hndl_r,function(e) {
				var tlrect1 = _gthis.tl.getBoundingClientRect();
				if(e.type == "mousedown") {
					var hndl_rect = hndl_r.getBoundingClientRect();
					_gthis.innerOffsetX = hndl_rect.width - (e.clientX - hndl_rect.left);
				}
				if(e.type == "mousemove") {
					var tprect = tp.getBoundingClientRect();
					var size = tprect.right + (e.clientX + _gthis.innerOffsetX - tprect.right);
					if(size <= tlrect1.right) {
						tp.style.width = e.clientX - tprect.left + _gthis.innerOffsetX + "px";
						pos.end = (e.clientX - tlrect1.left + _gthis.innerOffsetX) / tlrect1.width * _gthis.timelineLength;
						pos.duration = pos.end - pos.start;
					}
					_gthis.updateTimePointData(tp,pos,false);
				}
				e.stopImmediatePropagation();
				return false;
			});
			tp.appendChild(hndl_r);
		}
		var label = window.document.createElement("span");
		tp.appendChild(label);
		this.createGrabbable(tp,function(e1) {
			var tlrect2 = _gthis.tl.getBoundingClientRect();
			switch(e1.type) {
			case "mousedown":
				_gthis.innerOffsetX = e1.clientX - tp.getBoundingClientRect().left;
				return false;
			case "mousemove":
				var offsetX1 = e1.clientX - tlrect2.left - _gthis.innerOffsetX;
				_gthis.updateTimePoint(tp,pos,overlap,offsetX1);
				break;
			case "mouseup":
				_gthis.innerOffsetX = 0;
				return false;
			}
			e1.stopImmediatePropagation();
			return false;
		});
		this.tl.appendChild(tp);
		this.updateTimePoint(tp,pos,overlap,start / this.timelineLength * tlrect.width,false);
		var f2 = $bind(this,this.updateTimePoint);
		var tp2 = tp;
		var pos3 = pos;
		var allowOverlap1 = overlap;
		return function(offsetX2) {
			f2(tp2,pos3,allowOverlap1,offsetX2);
		};
	}
	,deleteTimePoint: function(pos) {
		var _g = 0;
		var _g1 = this.timepoints;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.pos == pos) {
				HxOverrides.remove(this.timepoints,o);
				o.el.parentElement.removeChild(o.el);
				break;
			}
		}
	}
	,updateLabel: function(text,left_right) {
		if(left_right == null) {
			left_right = "right";
		}
		var field = this.tl.parentElement.parentElement.getElementsByClassName("tfield")[left_right == "right" ? 1 : 0];
		field.innerHTML = text;
	}
	,SRC: function() {
		return Xml.parse(haxe_crypto_Base64.decode("PGRpdj48c3R5bGU+LnRpbWVsaW5lIHtib3JkZXI6IDFweCBzb2xpZCBibGFjazstd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7LXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7LW1vei11c2VyLXNlbGVjdDogbm9uZTstbXMtdXNlci1zZWxlY3Q6IG5vbmU7dXNlci1zZWxlY3Q6IG5vbmU7fS50aW1lbGluZSAjdGltZWxpbmUge2JhY2tncm91bmQ6bGlnaHRncmV5O3dpZHRoOiAxMDAlO2hlaWdodDogNTBweDtjdXJzb3I6IHBvaW50ZXI7Zm9udC1mYW1pbHk6IG1vbm9zcGFjZTtmb250LXN0cmV0Y2g6IGV4dHJhLWNvbmRlbnNlZDtib3gtc2hhZG93OiBpbnNldCAwIDBweCAxZW0gMC4xZW0gIzAwMDAwMDY2O30udGltZWxpbmUgLnBvaW50IHtwb3NpdGlvbjogYWJzb2x1dGU7Y3Vyc29yOiBncmFiO3dpZHRoOiA1MHB4O2hlaWdodDogaW5oZXJpdDtiYWNrZ3JvdW5kOiB3aGl0ZXNtb2tlO29wYWNpdHk6IC44Njtib3JkZXItbGVmdDogMXB4IHNvbGlkIGJsYWNrO2JvcmRlci1yaWdodDogMXB4IHNvbGlkIGJsYWNrO3RyYW5zaXRpb246IG9wYWNpdHkgMTAwbXMgZWFzZTt6LWluZGV4OiAxO30ucG9pbnQgLmdyYWJiZXIge3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjBweDt3aWR0aDo5cHg7aGVpZ2h0OjEwMCU7fS5wb2ludDo6YWZ0ZXJ7Y29udGVudDoi4pa8Ijtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OiAtN3B4O3RvcDogLTE3cHg7fS5wb2ludDpob3ZlciAucG9pbnR7b3BhY2l0eTogMS4wO30ucG9pbnQ6Zm9jdXMge291dGxpbmUtd2lkdGg6IDFweDtvdXRsaW5lLXN0eWxlOiBkYXNoZWQ7b3V0bGluZS1jb2xvcjogcmVkO30uZ3JhYmJlcjpob3ZlciB7YmFja2dyb3VuZDpjcmltc29uO29wYWNpdHk6IC44O30ucG9pbnQgc3BhbiB7Zm9udC1zaXplOiAxMHB4O3VzZXItc2VsZWN0OiBub25lO3RleHQtYWxpZ246IGNlbnRlcjt1c2VyLXNlbGVjdDogbm9uZTt9LmNhcmV0IHt0b3A6IDA7cG9zaXRpb246IGFic29sdXRlO3dpZHRoOiAxcHg7aGVpZ2h0OiAxMDBweDtiYWNrZ3JvdW5kOiByZWQ7bWFyZ2luOiAwO2JvcmRlcjogMDt9LnRmaWVsZHtwb3NpdGlvbjphYnNvbHV0ZTt9PC9zdHlsZT48ZGl2IHRlbXBsYXRlPSJ0aW1lbGluZV9iYXNlIiBzdHlsZT0id2lkdGg6MTAwJTtwb3NpdGlvbjpyZWxhdGl2ZTtwYWRkaW5nLXRvcDogMjRweDtwYWRkaW5nLWJvdHRvbTogMjRweDsiPjxkaXYgY2xhc3M9InRpbWVsaW5lIj48ZGl2IGlkPSJ0aW1lbGluZSI+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz0iY2FyZXQiIHN0eWxlPSJsZWZ0OjA7Ij48L2Rpdj48ZGl2IGNsYXNzPSJjYXJldCIgc3R5bGU9InJpZ2h0OjA7Ij48L2Rpdj48ZGl2IGNsYXNzPSJ0ZmllbGQiIHN0eWxlPSJsZWZ0OjZweDsiPjAwOjAwOjAwPC9kaXY+PGRpdiBjbGFzcz0idGZpZWxkIiBzdHlsZT0icmlnaHQ6NnB4OyI+MDA6MDA6MDA8L2Rpdj48L2Rpdj48L2Rpdj4=").toString());
	}
	,__class__: uapi_ui_Timeline
};
var uapi_ui_Tree = $hx_exports["uapi"]["tree"] = function(parent,obj,maxDepth) {
	if(maxDepth == null) {
		maxDepth = 3;
	}
	obj = obj == null ? { aa : 1, bb : [2,3,4], cc : { dd : { ee : [123], ff : "aa"}}} : obj;
	var base = window.document.createElement("div");
	var walk = null;
	walk = function(obj1,base1,depth) {
		if(depth == null) {
			depth = 0;
		}
		var sections = base1.getElementsByTagName("section");
		base1 = sections.length > 0 ? sections.item(0) : base1;
		base1.style.marginLeft = 100 * depth + "px";
		var fields = Reflect.fields(obj1);
		var cls = js_Boot.getClass(obj1);
		if(depth > maxDepth) {
			return;
		}
		if(cls != null) {
			fields = fields.concat(Type.getInstanceFields(cls));
		}
		var _g = 0;
		while(_g < fields.length) {
			var o = fields[_g];
			++_g;
			var field = Reflect.field(obj1,o);
			if(typeof(field) != "string" && typeof(field) != "boolean" && !(typeof(field) == "number" && ((field | 0) === field)) && typeof(field) != "number") {
				var walk1 = Reflect.field(obj1,o);
				var walk2 = base1.appendChild(uapi_ui_Tree.node({ _class : "treenode", key : "" + o, value : ""}));
				walk(walk1,walk2,depth + 1);
			} else {
				base1.appendChild(uapi_ui_Tree.node({ _class : "treenode", key : "" + o, value : "" + JSON.stringify(field)}));
			}
		}
	};
	walk(obj,base);
	window.document.body.appendChild(uapi_ui_Tree.styles({ }));
	parent.appendChild(base);
};
$hxClasses["uapi.ui.Tree"] = uapi_ui_Tree;
uapi_ui_Tree.__name__ = "uapi.ui.Tree";
uapi_ui_Tree.node = function(obj) {
	var el_0 = window.document.createElement("div");
	Reflect.setProperty(el_0,"onclick",new Function(new haxe_Template("if(event.target == this) this.classList.toggle('collapsed'); return false;").execute(obj)));
	Reflect.setProperty(el_0,"className",new haxe_Template("::_class::").execute(obj));
	el_0.innerText = new haxe_Template("::key::").execute(obj);
	var el_1 = window.document.createElement("section");
	el_1.innerText = new haxe_Template("::value::").execute(obj);
	el_0.appendChild(el_1);
	return el_0;
};
uapi_ui_Tree.styles = function(obj) {
	var el_0 = window.document.createElement("style");
	el_0.innerText = new haxe_Template(".collapsed section{height: 0px;}.treenode::before {content: 'â–²';transform: rotate(180deg);position: absolute;left: -15px;transition: transform 220ms ease-out;}.treenode.collapsed::before {transform: rotate(90deg);}.treenode {margin-left: 20px;display: flex;justify-content: space-between;position: relative;border-bottom: 1px solid grey;}.treenode section {background:honeydew;overflow:hidden;}").execute(obj);
	return el_0;
};
uapi_ui_Tree.prototype = {
	__class__: uapi_ui_Tree
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
haxe_Resource.content = [{ name : "template", data : "PGh0bWw+Cgk8aGVhZD4KCQk8c3R5bGU+CgkJCWh0bWwsIGJvZHkgewoJCQkJZm9udC1mYW1pbHk6QXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsKCQkJCWJhY2tncm91bmQ6IGRpbWdyYXk7CgkJCQljb2xvcjogYmxhY2s7CgkJCQlwYWRkaW5nOiAwOwoJCQkJbWFyZ2luOiAwOwoJCQkJd2lkdGg6IDEwMCU7CgkJCQloZWlnaHQ6IDEwMCU7CgkJCQlmb250LXNpemU6IDEwcHg7CgkJCQlmb250LWZhbWlseTogc2Fucy1zZXJpZjsKCQkJfQoJCQkudGl0bGUgewoJCQkJdG9wOiAxLjVweDsKCQkJCWJhY2tncm91bmQ6IGluaGVyaXQ7CgkJCQlwYWRkaW5nLWxlZnQ6IDVweDsKCQkJCXBhZGRpbmctcmlnaHQ6IDVweDsKCQkJfQoJCQkudGl0bGUsIC50aXRsZSBhIHsKCQkJCXBvc2l0aW9uOiBhYnNvbHV0ZTsKCQkJCXJpZ2h0OiAwcHg7CgkJCQlmb250LXdlaWdodDogMTAwOwoJCQkJZm9udC1zaXplOiAxMHB4OwoJCQkJdXNlci1zZWxlY3Q6IG5vbmU7CgkJCQlmb250LXZhcmlhbnQtY2Fwczogc21hbGwtY2FwczsKCQkJCXRleHQtZGVjb3JhdGlvbjogbm9uZTsKCQkJfQoJCQkubG9hZGluZyB7CgkJCQl3aWR0aDogMTAwJTsKCQkJCXBvc2l0aW9uOiBmaXhlZDsKCQkJCWhlaWdodDogMTAwJTsKCQkJCS8qZmlsdGVyOiBibHVyKDEuMnB4KTsqLwoJCQkJdmlzaWJpbGl0eTogdmlzaWJsZTsKCQkJfQoJCQkuaGlkZSB7CgkJCQlhbmltYXRpb246IGhpZGUgLjNzIGxpbmVhciBmb3J3YXJkczsKCQkJfQoJCQkubG9hZGluZyBkaXYgewoJCQkJd2lkdGg6IDIwJTsKCQkJCWNvbG9yOiB3aGl0ZTsKCQkJCW1hcmdpbjogMDsKCQkJCXRvcDogNTAlOwoJCQkJdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7CgkJCQlwb3NpdGlvbjogYWJzb2x1dGU7CgkJCQlsZWZ0OiA1MCU7CgkJCQlvcGFjaXR5OiAuNTsKCQkJfQoJCQkubG9hZGluZyBkaXYgc3ZnIHsKCQkJCWFuaW1hdGlvbjogbG9hZGluZyA1cyBpbmZpbml0ZSBsaW5lYXIgYmFja3dhcmRzOwoJCQl9CgkJCWEgewoJCQkJcG9zaXRpb246IHJlbGF0aXZlICFpbXBvcnRhbnQ7CgkJCQljb2xvcjogYmxhY2s7CgkJCX0KCQkJCgkJCS5tZXNzYWdlYm94ewoJCQkJb3ZlcmZsb3c6IGhpZGRlbjsKCQkJfQoJCQkjY29udHJvbHN7CgkJCQlwb3NpdGlvbjphYnNvbHV0ZTsKCQkJCWJvdHRvbTogMDsKCQkJCXdpZHRoOiAxMDAlOwoJCQkJYmFja2dyb3VuZDogZ2FpbnNib3JvOwoJCQkJb3ZlcmZsb3c6IGhpZGRlbjsKCQkJfQoJCQkjY29udHJvbHMgI2Vycm9yIHsKCQkJCW92ZXJmbG93OiBhdXRvOwoJCQkJbWFyZ2luOiAwcHggMHB4IDBweCAycHg7CgkJCQltYXgtaGVpZ2h0OiAyNTBweDsKCQkJCWRpc3BsYXk6IGlubGluZS1ibG9jazsKCQkJCXdpZHRoOiAxMDAlOwoJCQl9CgkJCSNlcnJvciAubWVzc2FnZSB7CgkJCQlmb250LXNpemU6IDEwcHggIWltcG9ydGFudDsKCQkJCWZvbnQtZmFtaWx5OiBNZW5sbywgbW9ub3NwYWNlOwoJCQkJZm9udC13ZWlnaHQ6IDEwMDsKCQkJCS13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOwoJCQkJYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGdyZXk7CgkJCQl3aGl0ZS1zcGFjZTogcHJlOwoJCQl9CgkJCQoJCQkubWVzc2FnZTpob3ZlciB7CgkJCQliYWNrZ3JvdW5kOiBsaWdodGdyYXk7CgkJCX0KCgkJCS5mb2xkZWQgewoJCQkJaGVpZ2h0OiAxNXB4OwoJCQkJb3ZlcmZsb3c6aGlkZGVuOwoJCQkJCgkJCX0KCQkJI2Vycm9yIHsKCQkJCWRpc3BsYXk6IGJsb2NrOwoJCQl9CgoJCQkuZm9sZGVkICNlcnJvciB7CgkJCQlkaXNwbGF5OiBub25lOwoJCQl9CgkJCSNtZXNzYWdlY291bnQgewoJCQkJbWFyZ2luLWxlZnQ6IDJweDsKCQkJCXVzZXItc2VsZWN0OiBub25lOwoJCQkJY3Vyc29yOiBwb2ludGVyOwoJCQkJaGVpZ2h0OiAxNXB4OwoJCQl9CgkJCSNtZXNzYWdlY291bnQ6aG92ZXIgewoJCQkJdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7CgkJCX0KCQkJI21lc3NhZ2Vjb3VudDo6YmVmb3JlIHsKCQkJCWNvbnRlbnQ6ICLilrwiOwoJCQkJbWFyZ2luLXJpZ2h0OiAycHg7CgkJCQlkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CgkJCQl0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTAwbXMgbGluZWFyOwoJCQl9CgkJCS5mb2xkZWQgI21lc3NhZ2Vjb3VudDo6YmVmb3JlIHsKCQkJCWNvbnRlbnQ6ICLilrwiOwoJCQkJdHJhbnNmb3JtOiByb3RhdGUoLTkwZGVnKTsKCQkJCWRpc3BsYXk6IGlubGluZS1ibG9jazsKCQkJCW1hcmdpbi1yaWdodDogMnB4OwoJCQl9CgkJCSN2aWRlb19jb250cm9sc193cmFwcGVyLCAjY29udHJvbHNfY3VzdG9tIHsKCQkJCXBvc2l0aW9uOiByZWxhdGl2ZTsKCQkJfQoJCQkjY29udHJvbHNfZWxlbWVudHMgewoJCQkJcGFkZGluZzogMTBweCAxMnB4IDVweCAxMnB4OwoJCQkJZGlzcGxheTogZmxleDsKCQkJCWZsZXgtd3JhcDogd3JhcDsKCQkJfQoJCQkjY29udHJvbHNfZWxlbWVudHMgZGl2OmhvdmVyIHsKCQkJCWJhY2tncm91bmQ6IGxpZ2h0Z3JleTsKCQkJfQoJCQkjY29udHJvbHNfZWxlbWVudHMgbGFiZWwgewoJCQkJbWFyZ2luLWxlZnQ6IDJweDsKCQkJfQoJCQkjY29udHJvbHNfZWxlbWVudHMgZGl2IHNlbGVjdCB7CgkJCQl3aWR0aDogOTklOwoJCQkJY3Vyc29yOnBvaW50ZXI7CgkJCX0KCQkJQG1lZGlhIChtYXgtd2lkdGg6IDExMDBweCkgewoJCQkJI2NvbnRyb2xzX2VsZW1lbnRzIGRpdiB7CgkJCQkJd2lkdGg6IDI1JTsKCQkJCX0KCQkJfQoJCQlAbWVkaWEgKG1heC13aWR0aDogODAwcHgpIHsKCQkJCSNjb250cm9sc19lbGVtZW50cyBkaXYgewoJCQkJCXdpZHRoOiAzMyU7CgkJCQl9CgkJCX0KCQkJQG1lZGlhIChtYXgtd2lkdGg6IDQwMHB4KSB7CgkJCQkjY29udHJvbHNfZWxlbWVudHMgZGl2IHsKCQkJCQl3aWR0aDogNTAlOwoJCQkJfQoJCQl9CgoJCQkvKiAgbWFrZSBzY3JvbGxiYXIgaW52aXNpYmxlICoKCQkJOjotd2Via2l0LXNjcm9sbGJhciB7CgkJCQl3aWR0aDogMHB4OyAgCgkJCQliYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgIAoJCQl9Ki8KCQkJCgkJCUBrZXlmcmFtZXMgbG9hZGluZyB7CgkJCQlmcm9tIHt0cmFuc2Zvcm06cm90YXRlKDBkZWcpO30KCQkJCXRvIHt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyk7fQoJCQl9CgkJCUBrZXlmcmFtZXMgaGlkZSB7CgkJCQlmcm9tIHtvcGFjaXR5Oi44OyB2aXNpYmlsaXR5OiB2aXNpYmxlO30KCQkJCXRvIHtvcGFjaXR5OiAwLjA7IHZpc2liaWxpdHk6IGhpZGRlbjt9CgkJCX0KCgkJPC9zdHlsZT4KCQk8c2NyaXB0PgoJCQlpZighZnJhbWVFbGVtZW50KQoJCQkJdGhyb3cgImNoZWNrIHNhbWUtb3JpZ2luIHBvbGljeSI7CgkJCWVsc2UKCQkJCWlmKCdob29rJyBpbiBmcmFtZUVsZW1lbnQpCgkJCQkJZnJhbWVFbGVtZW50Lmhvb2sod2luZG93KTsKCQkJLy91c2VkIC9yZXMvcGxheWVycy8qOgoJCQl2YXIgdXJpID0gdW5lc2NhcGUoJzo6dXJpOjonKTsgCgkJCXZhciB0aXRsZSA9IHVuZXNjYXBlKCc6OnRpdGxlOjogKDo6dGl0bGVfdmVyc2lvbjo6KScpOwoJCTwvc2NyaXB0PgoJCTx0aXRsZT46OmRvY190aXRsZTo6PC90aXRsZT4KCQk6OmhlYWQ6OgoJPC9oZWFkPgoJPGJvZHk+CgkJPGRpdiBpZD0ibG9hZGVyIiBjbGFzcz0ibG9hZGluZyI+CgkJCTxkaXY+CgkJCTo6bG9hZGluZzo6CgkJCTwvZGl2PgoJCTwvZGl2PgoJCTxkaXYgaWQ9InZpZGVvX2NvbnRyb2xzX3dyYXBwZXIiPgoJCQk8dmlkZW8gaWQ9InZpZGVvIiB3aWR0aD0iMTAwJSIgJCRwb3N0ZXIoKSA6OmlmIGF0dHJfY29udHJvbHM6OmNvbnRyb2xzOjplbmQ6OiA6OmlmIGF0dHJfcGxheXNpbmxpbmU6OnBsYXlzaW5saW5lOjplbmQ6OiA6OmlmIGF0dHJfbXV0ZWQ6Om11dGVkOjplbmQ6OiA6OmlmIGF0dHJfYXV0b3BsYXk6OmF1dG9wbGF5OjplbmQ6OiA+PC92aWRlbz4KCQkJPGRpdiBpZD0idHRtbCI+PC9kaXY+CgkJCTxkaXYgaWQ9ImNvbnRyb2xzX2N1c3RvbSI+PC9kaXY+CgkJPC9kaXY+CgkJOjpib2R5OjoKCQk8ZGl2IGlkPSJjb250cm9scyI+CgkJCTxzcGFuIGNsYXNzPSJ0aXRsZSI+Ojp0aXRsZTo6Jm5ic3A7PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Ijo6dGl0bGVfaHJlZjo6Ij4oOjp0aXRsZV92ZXJzaW9uOjopPC9hPjwvc3Bhbj4KCQkJPGRpdiBjbGFzcz0ibWVzc2FnZWJveCBmb2xkZWQiPgoJCQkJPGRpdiBpZD0ibWVzc2FnZWNvdW50Ij5ubyBtZXNzYWdlczwvZGl2PgoJCQkJPGRpdiBpZD0iZXJyb3IiPjwvZGl2PgoJCQk8L2Rpdj4KCQkJOjpjb250cm9sczo6CgkJPC9kaXY+CgkJPHNjcmlwdD4KCQkJaWYoJ2hvb2tfZW5kJyBpbiBmcmFtZUVsZW1lbnQpCgkJCQlmcmFtZUVsZW1lbnQuaG9va19lbmQod2luZG93LCB2aWRlbyk7CgkJPC9zY3JpcHQ+Cgk8L2JvZHk+CjwvaHRtbD4"},{ name : "shaka-argan", data : "eyJkcm1fc2VydmVyX3BsYXlyZWFkeSI6eyJoZWxwIjoiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHkiLCJkZWZhdWx0XyI6Imh0dHBzOi8vcGxheXJlYWR5LmRpcmVjdHRhcHMubmV0L3ByL3N2Yy9yaWdodHNtYW5hZ2VyLmFzbXg/UGxheVJpZ2h0PTEmVXNlU2ltcGxlTm9uUGVyc2lzdGVudExpY2Vuc2U9MSZQbGF5RW5hYmxlcnM9Nzg2NjI3RDgtQzJBNi00NEJFLThGODgtMDhBRTI1NUIwMUE3In0sInNldFRleHRUcmFja1Zpc2liaWxpdHkiOnsiaGVscCI6IlRleHQgVHJhY2tzIHZpc2libGUiLCJkZWZhdWx0XyI6dHJ1ZX0sImRybV9zZXJ2ZXJfd2lkZXZpbmUiOnsiaGVscCI6ImNvbS53aWRldmluZS5hbHBoYSIsImRlZmF1bHRfIjoiaHR0cHM6Ly93aWRldmluZS1wcm94eS5hcHBzcG90LmNvbS9wcm94eSJ9LCJqdW1wTGFyZ2VHYXBzIjp7ImhlbHAiOiJjb25maWcuc3RyZWFtaW5nLmp1bXBMYXJnZUdhcHMiLCJkZWZhdWx0XyI6ZmFsc2V9LCJzbWFsbEdhcExpbWl0Ijp7ImhlbHAiOiJjb25maWcuc3RyZWFtaW5nLnNtYWxsR2FwTGltaXQiLCJkZWZhdWx0XyI6MC41fX0"},{ name : "_help_map", data : "Ynk1OnF1aWV0b3k0OmhlbHB5Mzg6ZG8lMjBub3QlMjBzaG93JTIwZXJyb3JzJTIwaW4lMjBvdXRwdXR5ODpkZWZhdWx0X2ZneTExOnBsYXlzaW5saW5lb1IxeTQ4OmRpc2FibGUlMjB2aWRlb2VsZW1lbnQlMjBwbGF5c2lubGluZSUyMGF0dHJpYnV0ZVIzdGd5NTptdXRlZG9SMXkzNDpzZXQlMjB2aWRlb2VsZW1lbnQlMjBtdXRlZCUyMHN0YXRlUjNmZ3k4OmNvbnRyb2xzb1IxeTQ2OmRpc2FibGUlMjB2aWRlb2VsZW1lbnQlMjBidWlsdCUyMGluJTIwY29udHJvbHNSM3RneTg6YXV0b3BsYXlvUjF5Mzc6c2V0JTIwdmlkZW9lbGVtZW50JTIwYXV0b3BsYXklMjBzdGF0ZVIzdGdo"},{ name : "hlsjs-src", data : "ewogICAgIjAuMTIuMyI6IFsiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9obHMuanNAMC4xMi4zL2Rpc3QvaGxzLm1pbi5qcyJdLAogICAgIjAuMTIuMiI6IFsiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9obHMuanNAMC4xMi4yL2Rpc3QvaGxzLm1pbi5qcyJdLAogICAgIjAuMTEuMCI6IFsiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9obHMuanNAMC4xMS4wL2Rpc3QvaGxzLm1pbi5qcyJdLAogICAgIjAuMTAuMSI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvaGxzLmpzLzAuMTAuMS9obHMuanMiXQp9Cg"},{ name : "hasplayer-src", data : "ewogICAgIjEuMTUuMSI6IFsiaHR0cHM6Ly9vcmFuZ2Utb3BlbnNvdXJjZS5naXRodWIuaW8vaGFzcGxheWVyLmpzLzEuMTUuMS9kaXN0L2hhc3BsYXllci5qcyJdLAogICAgIjEuMTUuMCI6IFsiaHR0cHM6Ly9vcmFuZ2Utb3BlbnNvdXJjZS5naXRodWIuaW8vaGFzcGxheWVyLmpzLzEuMTUuMC9kaXN0L2hhc3BsYXllci5qcyJdLAogICAgIjEuMTQuMiI6IFsiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9oYXNwbGF5ZXIuanNAMS4xNC4yL2Rpc3QvaGFzcGxheWVyLm1pbi5qcyJdCn0"},{ name : "dashjs", data : ""},{ name : "shaka", data : "ZGF0YTp0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTg7YmFzZTY0LEx5OGdSMlZ1WlhKaGRHVmtJR0o1SUVoaGVHVWdOQzR3TGpVS0tHWjFibU4wYVc5dUlDZ2taMnh2WW1Gc0tTQjdJQ0oxYzJVZ2MzUnlhV04wSWpzS2RtRnlJQ1JvZUVOc1lYTnpaWE1nUFNCN2ZTd2taWE4wY2lBOUlHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdhbk5mUW05dmRDNWZYM04wY21sdVoxOXlaV01vZEdocGN5d25KeWs3SUgwc0pHaDRSVzUxYlhNZ1BTQWthSGhGYm5WdGN5QjhmQ0I3ZlN3a1h6c0tablZ1WTNScGIyNGdKR1Y0ZEdWdVpDaG1jbTl0TENCbWFXVnNaSE1wSUhzS0NYWmhjaUJ3Y205MGJ5QTlJRTlpYW1WamRDNWpjbVZoZEdVb1puSnZiU2s3Q2dsbWIzSWdLSFpoY2lCdVlXMWxJR2x1SUdacFpXeGtjeWtnY0hKdmRHOWJibUZ0WlYwZ1BTQm1hV1ZzWkhOYmJtRnRaVjA3Q2dscFppZ2dabWxsYkdSekxuUnZVM1J5YVc1bklDRTlQU0JQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5JQ2tnY0hKdmRHOHVkRzlUZEhKcGJtY2dQU0JtYVdWc1pITXVkRzlUZEhKcGJtYzdDZ2x5WlhSMWNtNGdjSEp2ZEc4N0NuMEtkbUZ5SUVGeVoyRnVJRDBnWm5WdVkzUnBiMjRvS1NCN0lIMDdDaVJvZUVOc1lYTnpaWE5iSWtGeVoyRnVJbDBnUFNCQmNtZGhianNLUVhKbllXNHVYMTl1WVcxbFgxOGdQU0IwY25WbE93cEJjbWRoYmk1emRHRnlkQ0E5SUdaMWJtTjBhVzl1S0dOdmJtWnBaeWtnZXdvSmFXWW9iblZzYkNBaFBTQmpiMjVtYVdjcElIc0tDUWwyWVhJZ1lYSm5jMTl6WlhRZ1BTQnVaWGNnYUdGNFpWOWtjMTlUZEhKcGJtZE5ZWEFvS1RzS0NRbDJZWElnWDJjZ1BTQXdPd29KQ1haaGNpQmZaekVnUFNCU1pXWnNaV04wTG1acFpXeGtjeWhqYjI1bWFXY3BPd29KQ1hkb2FXeGxLRjluSUR3Z1gyY3hMbXhsYm1kMGFDa2dld29KQ1FsMllYSWdaaUE5SUY5bk1WdGZaMTA3Q2drSkNTc3JYMmM3Q2drSkNYWmhjaUIyWVd4MVpTQTlJRkpsWm14bFkzUXVabWxsYkdRb1kyOXVabWxuTEdZcE93b0pDUWxwWmloZlgyMWhjRjl5WlhObGNuWmxaRnRtWFNBaFBTQnVkV3hzS1NCN0Nna0pDUWxoY21kelgzTmxkQzV6WlhSU1pYTmxjblpsWkNobUxIWmhiSFZsS1RzS0NRa0pmU0JsYkhObElIc0tDUWtKQ1dGeVozTmZjMlYwTG1oYlpsMGdQU0IyWVd4MVpUc0tDUWtKZlFvSkNYMEtDUWxCY21kaGJpNWhjbWR6SUQwZ1lYSm5jMTl6WlhRN0NnbDlDbjA3Q2tGeVoyRnVMbTlpYW1WamRFWnliMjFOWVhBZ1BTQm1kVzVqZEdsdmJpaHRZWEFwSUhzS0NYWmhjaUJ2WW1vZ1BTQjdJSDA3Q2dsMllYSWdheUE5SUcxaGNDNXJaWGx6S0NrN0NnbDNhR2xzWlNockxtaGhjMDVsZUhRb0tTa2dld29KQ1haaGNpQnJNU0E5SUdzdWJtVjRkQ2dwT3dvSkNXOWlhbHRyTVYwZ1BTQmZYMjFoY0Y5eVpYTmxjblpsWkZ0ck1WMGdJVDBnYm5Wc2JDQS9JRzFoY0M1blpYUlNaWE5sY25abFpDaHJNU2tnT2lCdFlYQXVhRnRyTVYwN0NnbDlDZ2x5WlhSMWNtNGdiMkpxT3dwOU93cDJZWElnU0hoUGRtVnljbWxrWlhNZ1BTQm1kVzVqZEdsdmJpZ3BJSHNnZlRzS0pHaDRRMnhoYzNObGMxc2lTSGhQZG1WeWNtbGtaWE1pWFNBOUlFaDRUM1psY25KcFpHVnpPd3BJZUU5MlpYSnlhV1JsY3k1ZlgyNWhiV1ZmWHlBOUlIUnlkV1U3Q2toNFQzWmxjbkpwWkdWekxuTjBja1JoZEdVZ1BTQm1kVzVqZEdsdmJpaHpLU0I3Q2dsemQybDBZMmdvY3k1c1pXNW5kR2dwSUhzS0NXTmhjMlVnT0RvS0NRbDJZWElnYXlBOUlITXVjM0JzYVhRb0lqb2lLVHNLQ1FsMllYSWdaQ0E5SUc1bGR5QkVZWFJsS0NrN0Nna0paRnNpYzJWMFZHbHRaU0pkS0RBcE93b0pDV1JiSW5ObGRGVlVRMGh2ZFhKeklsMG9hMXN3WFNrN0Nna0paRnNpYzJWMFZWUkRUV2x1ZFhSbGN5SmRLR3RiTVYwcE93b0pDV1JiSW5ObGRGVlVRMU5sWTI5dVpITWlYU2hyV3pKZEtUc0tDUWx5WlhSMWNtNGdaRHNLQ1dOaGMyVWdNVEE2Q2drSmRtRnlJR3N4SUQwZ2N5NXpjR3hwZENnaUxTSXBPd29KQ1hKbGRIVnliaUJ1WlhjZ1JHRjBaU2hyTVZzd1hTeHJNVnN4WFNBdElERXNhekZiTWwwc01Dd3dMREFwT3dvSlkyRnpaU0F4T1RvS0NRbDJZWElnYXpJZ1BTQnpMbk53YkdsMEtDSWdJaWs3Q2drSmRtRnlJSGtnUFNCck1sc3dYUzV6Y0d4cGRDZ2lMU0lwT3dvSkNYWmhjaUIwSUQwZ2F6SmJNVjB1YzNCc2FYUW9Jam9pS1RzS0NRbHlaWFIxY200Z2JtVjNJRVJoZEdVb2VWc3dYU3g1V3pGZElDMGdNU3g1V3pKZExIUmJNRjBzZEZzeFhTeDBXekpkS1RzS0NXUmxabUYxYkhRNkNna0pkR2h5YjNjZ2JtVjNJR3B6WDE4a1FtOXZkRjlJWVhobFJYSnliM0lvSWtsdWRtRnNhV1FnWkdGMFpTQm1iM0p0WVhRZ09pQWlJQ3NnY3lrN0NnbDlDbjA3Q2toNFQzWmxjbkpwWkdWekxtTmpZU0E5SUdaMWJtTjBhVzl1S0hNc2FXNWtaWGdwSUhzS0NYWmhjaUI0SUQwZ2N5NWphR0Z5UTI5a1pVRjBLR2x1WkdWNEtUc0tDV2xtS0hnZ0lUMGdlQ2tnZXdvSkNYSmxkSFZ5YmlCMWJtUmxabWx1WldRN0NnbDlDZ2x5WlhSMWNtNGdlRHNLZlRzS1NIaFBkbVZ5Y21sa1pYTXVjM1ZpYzNSeUlEMGdablZ1WTNScGIyNG9jeXh3YjNNc2JHVnVLU0I3Q2dscFppaHNaVzRnUFQwZ2JuVnNiQ2tnZXdvSkNXeGxiaUE5SUhNdWJHVnVaM1JvT3dvSmZTQmxiSE5sSUdsbUtHeGxiaUE4SURBcElIc0tDUWxwWmlod2IzTWdQVDBnTUNrZ2V3b0pDUWxzWlc0Z1BTQnpMbXhsYm1kMGFDQXJJR3hsYmpzS0NRbDlJR1ZzYzJVZ2V3b0pDUWx5WlhSMWNtNGdJaUk3Q2drSmZRb0pmUW9KY21WMGRYSnVJSE11YzNWaWMzUnlLSEJ2Y3l4c1pXNHBPd3A5T3dwSWVFOTJaWEp5YVdSbGN5NXBkR1Z5SUQwZ1puVnVZM1JwYjI0b1lTa2dld29KY21WMGRYSnVJSHNnWTNWeUlEb2dNQ3dnWVhKeUlEb2dZU3dnYUdGelRtVjRkQ0E2SUdaMWJtTjBhVzl1S0NrZ2V3b0pDWEpsZEhWeWJpQjBhR2x6TG1OMWNpQThJSFJvYVhNdVlYSnlMbXhsYm1kMGFEc0tDWDBzSUc1bGVIUWdPaUJtZFc1amRHbHZiaWdwSUhzS0NRbHlaWFIxY200Z2RHaHBjeTVoY25KYmRHaHBjeTVqZFhJcksxMDdDZ2w5ZlRzS2ZUc0tUV0YwYUM1ZlgyNWhiV1ZmWHlBOUlIUnlkV1U3Q25aaGNpQlNaV1pzWldOMElEMGdablZ1WTNScGIyNG9LU0I3SUgwN0NpUm9lRU5zWVhOelpYTmJJbEpsWm14bFkzUWlYU0E5SUZKbFpteGxZM1E3Q2xKbFpteGxZM1F1WDE5dVlXMWxYMThnUFNCMGNuVmxPd3BTWldac1pXTjBMbVpwWld4a0lEMGdablZ1WTNScGIyNG9ieXhtYVdWc1pDa2dld29KZEhKNUlIc0tDUWx5WlhSMWNtNGdiMXRtYVdWc1pGMDdDZ2w5SUdOaGRHTm9LQ0JsSUNrZ2V3b0pDWFpoY2lCbE1TQTlJQ2dvWlNrZ2FXNXpkR0Z1WTJWdlppQnFjMTlmSkVKdmIzUmZTR0Y0WlVWeWNtOXlLU0EvSUdVdWRtRnNJRG9nWlRzS0NRbHlaWFIxY200Z2JuVnNiRHNLQ1gwS2ZUc0tVbVZtYkdWamRDNW1hV1ZzWkhNZ1BTQm1kVzVqZEdsdmJpaHZLU0I3Q2dsMllYSWdZU0E5SUZ0ZE93b0phV1lvYnlBaFBTQnVkV3hzS1NCN0Nna0pkbUZ5SUdoaGMwOTNibEJ5YjNCbGNuUjVJRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVUc0tDUWxtYjNJb0lIWmhjaUJtSUdsdUlHOGdLU0I3Q2drSmFXWW9aaUFoUFNBaVgxOXBaRjlmSWlBbUppQm1JQ0U5SUNKb2VGOWZZMnh2YzNWeVpYTmZYeUlnSmlZZ2FHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHZMR1lwS1NCN0Nna0pDV0V1Y0hWemFDaG1LVHNLQ1FsOUNna0pmUW9KZlFvSmNtVjBkWEp1SUdFN0NuMDdDbEpsWm14bFkzUXVhWE5HZFc1amRHbHZiaUE5SUdaMWJtTjBhVzl1S0dZcElIc0tDV2xtS0hSNWNHVnZaaWhtS1NBOVBTQWlablZ1WTNScGIyNGlLU0I3Q2drSmNtVjBkWEp1SUNFb1ppNWZYMjVoYldWZlh5QjhmQ0JtTGw5ZlpXNWhiV1ZmWHlrN0NnbDlJR1ZzYzJVZ2V3b0pDWEpsZEhWeWJpQm1ZV3h6WlRzS0NYMEtmVHNLZG1GeUlGTm9ZV3RoSUQwZ1puVnVZM1JwYjI0b0tTQjdJSDA3Q2lSb2VFTnNZWE56WlhOYklsTm9ZV3RoSWwwZ1BTQlRhR0ZyWVRzS1UyaGhhMkV1WDE5dVlXMWxYMThnUFNCMGNuVmxPd3BUYUdGcllTNXRZV2x1SUQwZ1puVnVZM1JwYjI0b0tTQjdDZ2wyWVhJZ2RYSnBJRDBnVW1WbWJHVmpkQzVtYVdWc1pDaDNhVzVrYjNjc0luVnlhU0lwT3dvSmRtRnlJSE5vWVd0aElEMGdVbVZtYkdWamRDNW1hV1ZzWkNoM2FXNWtiM2NzSW5Ob1lXdGhJaWs3Q2dsMllYSWdiMjVGY25KdmNrVjJaVzUwSUQwZ1puVnVZM1JwYjI0b1pYWmxiblFwSUhzS0NRbHZia1Z5Y205eUtHVjJaVzUwTG1SbGRHRnBiQ2s3Q2dsOU93b0pkbUZ5SUc5dVJYSnliM0lnUFNCbWRXNWpkR2x2YmlobGNuSnZjaWtnZXdvSkNYUm9jbTkzSUc1bGR5QnFjMTlmSkVKdmIzUmZTR0Y0WlVWeWNtOXlLRnNpUlhKeWIzSWdZMjlrWlNJc1pYSnliM0l1WTI5a1pTd2liMkpxWldOMElpeGxjbkp2Y2wwdWFtOXBiaWdpSUNJcEtUc0tDWDA3Q2dsM2FXNWtiM2N1YUdWc2NDQTlJR1oxYm1OMGFXOXVLQ2tnZXdvSkNYSmxkSFZ5YmlCQmNtZGhiaTV2WW1wbFkzUkdjbTl0VFdGd0tHaGhlR1ZmVlc1elpYSnBZV3hwZW1WeUxuSjFiaWhvWVhobFgxSmxjMjkxY21ObExtZGxkRk4wY21sdVp5Z2lYMmhsYkhCZmJXRndJaWtwS1RzS0NYMDdDZ2xCY21kaGJpNXpkR0Z5ZENoM2FXNWtiM2N1WTI5dVptbG5LVHNLQ1dsbUtITm9ZV3RoSUNFOUlHNTFiR3dwSUhzS0NRbHphR0ZyWVM1d2IyeDVabWxzYkM1cGJuTjBZV3hzUVd4c0tDazdDZ2tKYVdZb2MyaGhhMkV1VUd4aGVXVnlMbWx6UW5KdmQzTmxjbE4xY0hCdmNuUmxaQ2dwS1NCN0Nna0pDWFpoY2lCd2JHRjVaWElnUFNCVGFHRnJZUzVsZUhCdmMyVmZjR3hoZVdWeUtHNWxkeUJ6YUdGcllTNVFiR0Y1WlhJb1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSW5acFpHVnZJaWtwS1RzS0NRa0pkbUZ5SUhCc1lYbGxjakVnUFNCd2JHRjVaWEk3Q2drSkNYWmhjaUIwYlhBN0Nna0pDWFpoY2lCMGJYQXhPd29KQ1FscFppaEJjbWRoYmk1aGNtZHpJQ0U5SUc1MWJHd3BJSHNLQ1FrSkNYWmhjaUJmZEdocGN5QTlJRUZ5WjJGdUxtRnlaM003Q2drSkNRbDBiWEF4SUQwZ1gxOXRZWEJmY21WelpYSjJaV1JiSW5OdFlXeHNSMkZ3VEdsdGFYUWlYU0FoUFNCdWRXeHNJRDhnWDNSb2FYTXVaWGhwYzNSelVtVnpaWEoyWldRb0luTnRZV3hzUjJGd1RHbHRhWFFpS1NBNklGOTBhR2x6TG1ndWFHRnpUM2R1VUhKdmNHVnlkSGtvSW5OdFlXeHNSMkZ3VEdsdGFYUWlLVHNLQ1FrSmZTQmxiSE5sSUhzS0NRa0pDWFJ0Y0RFZ1BTQm1ZV3h6WlRzS0NRa0pmUW9KQ1FscFppaDBiWEF4S1NCN0Nna0pDUWwyWVhJZ1gzUm9hWE14SUQwZ1FYSm5ZVzR1WVhKbmN6c0tDUWtKQ1hSdGNDQTlJSEJoY25ObFJteHZZWFFvWDE5dFlYQmZjbVZ6WlhKMlpXUmJJbk50WVd4c1IyRndUR2x0YVhRaVhTQWhQU0J1ZFd4c0lEOGdYM1JvYVhNeExtZGxkRkpsYzJWeWRtVmtLQ0p6YldGc2JFZGhjRXhwYldsMElpa2dPaUJmZEdocGN6RXVhRnNpYzIxaGJHeEhZWEJNYVcxcGRDSmRLVHNLQ1FrSmZTQmxiSE5sSUhzS0NRa0pDWFJ0Y0NBOUlDNDFPd29KQ1FsOUNna0pDWFpoY2lCMGJYQXlPd29KQ1FsMllYSWdkRzF3TXpzS0NRa0phV1lvUVhKbllXNHVZWEpuY3lBaFBTQnVkV3hzS1NCN0Nna0pDUWwyWVhJZ1gzUm9hWE15SUQwZ1FYSm5ZVzR1WVhKbmN6c0tDUWtKQ1hSdGNETWdQU0JmWDIxaGNGOXlaWE5sY25abFpGc2lhblZ0Y0V4aGNtZGxSMkZ3Y3lKZElDRTlJRzUxYkd3Z1B5QmZkR2hwY3pJdVpYaHBjM1J6VW1WelpYSjJaV1FvSW1wMWJYQk1ZWEpuWlVkaGNITWlLU0E2SUY5MGFHbHpNaTVvTG1oaGMwOTNibEJ5YjNCbGNuUjVLQ0pxZFcxd1RHRnlaMlZIWVhCeklpazdDZ2tKQ1gwZ1pXeHpaU0I3Q2drSkNRbDBiWEF6SUQwZ1ptRnNjMlU3Q2drSkNYMEtDUWtKYVdZb2RHMXdNeWtnZXdvSkNRa0pkbUZ5SUY5MGFHbHpNeUE5SUVGeVoyRnVMbUZ5WjNNN0Nna0pDUWwyWVhJZ1h5QTlJRjlmYldGd1gzSmxjMlZ5ZG1Wa1d5SnFkVzF3VEdGeVoyVkhZWEJ6SWwwZ0lUMGdiblZzYkNBL0lGOTBhR2x6TXk1blpYUlNaWE5sY25abFpDZ2lhblZ0Y0V4aGNtZGxSMkZ3Y3lJcElEb2dYM1JvYVhNekxtaGJJbXAxYlhCTVlYSm5aVWRoY0hNaVhUc0tDUWtKQ1hSdGNESWdQU0IwZVhCbGIyWW9YeWtnUFQwZ0ltSnZiMnhsWVc0aUlEOGdYeUE2SUY4Z0lUMGdJbVpoYkhObElqc0tDUWtKZlNCbGJITmxJSHNLQ1FrSkNYUnRjRElnUFNCbVlXeHpaVHNLQ1FrSmZRb0pDUWwyWVhJZ2RHMXdORHNLQ1FrSmRtRnlJSFJ0Y0RVN0Nna0pDV2xtS0VGeVoyRnVMbUZ5WjNNZ0lUMGdiblZzYkNrZ2V3b0pDUWtKZG1GeUlGOTBhR2x6TkNBOUlFRnlaMkZ1TG1GeVozTTdDZ2tKQ1FsMGJYQTFJRDBnWDE5dFlYQmZjbVZ6WlhKMlpXUmJJbVJ5YlY5elpYSjJaWEpmZDJsa1pYWnBibVVpWFNBaFBTQnVkV3hzSUQ4Z1gzUm9hWE0wTG1WNGFYTjBjMUpsYzJWeWRtVmtLQ0prY20xZmMyVnlkbVZ5WDNkcFpHVjJhVzVsSWlrZ09pQmZkR2hwY3pRdWFDNW9ZWE5QZDI1UWNtOXdaWEowZVNnaVpISnRYM05sY25abGNsOTNhV1JsZG1sdVpTSXBPd29KQ1FsOUlHVnNjMlVnZXdvSkNRa0pkRzF3TlNBOUlHWmhiSE5sT3dvSkNRbDlDZ2tKQ1dsbUtIUnRjRFVwSUhzS0NRa0pDWFpoY2lCZmRHaHBjelVnUFNCQmNtZGhiaTVoY21kek93b0pDUWtKZEcxd05DQTlJRjlmYldGd1gzSmxjMlZ5ZG1Wa1d5SmtjbTFmYzJWeWRtVnlYM2RwWkdWMmFXNWxJbDBnSVQwZ2JuVnNiQ0EvSUY5MGFHbHpOUzVuWlhSU1pYTmxjblpsWkNnaVpISnRYM05sY25abGNsOTNhV1JsZG1sdVpTSXBJRG9nWDNSb2FYTTFMbWhiSW1SeWJWOXpaWEoyWlhKZmQybGtaWFpwYm1VaVhUc0tDUWtKZlNCbGJITmxJSHNLQ1FrSkNYUnRjRFFnUFNBaWFIUjBjSE02THk5M2FXUmxkbWx1WlMxd2NtOTRlUzVoY0hCemNHOTBMbU52YlM5d2NtOTRlU0k3Q2drSkNYMEtDUWtKZG1GeUlIUnRjRFk3Q2drSkNYWmhjaUIwYlhBM093b0pDUWxwWmloQmNtZGhiaTVoY21keklDRTlJRzUxYkd3cElIc0tDUWtKQ1haaGNpQmZkR2hwY3pZZ1BTQkJjbWRoYmk1aGNtZHpPd29KQ1FrSmRHMXdOeUE5SUY5ZmJXRndYM0psYzJWeWRtVmtXeUprY20xZmMyVnlkbVZ5WDNCc1lYbHlaV0ZrZVNKZElDRTlJRzUxYkd3Z1B5QmZkR2hwY3pZdVpYaHBjM1J6VW1WelpYSjJaV1FvSW1SeWJWOXpaWEoyWlhKZmNHeGhlWEpsWVdSNUlpa2dPaUJmZEdocGN6WXVhQzVvWVhOUGQyNVFjbTl3WlhKMGVTZ2laSEp0WDNObGNuWmxjbDl3YkdGNWNtVmhaSGtpS1RzS0NRa0pmU0JsYkhObElIc0tDUWtKQ1hSdGNEY2dQU0JtWVd4elpUc0tDUWtKZlFvSkNRbHBaaWgwYlhBM0tTQjdDZ2tKQ1FsMllYSWdYM1JvYVhNM0lEMGdRWEpuWVc0dVlYSm5jenNLQ1FrSkNYUnRjRFlnUFNCZlgyMWhjRjl5WlhObGNuWmxaRnNpWkhKdFgzTmxjblpsY2w5d2JHRjVjbVZoWkhraVhTQWhQU0J1ZFd4c0lEOGdYM1JvYVhNM0xtZGxkRkpsYzJWeWRtVmtLQ0prY20xZmMyVnlkbVZ5WDNCc1lYbHlaV0ZrZVNJcElEb2dYM1JvYVhNM0xtaGJJbVJ5YlY5elpYSjJaWEpmY0d4aGVYSmxZV1I1SWwwN0Nna0pDWDBnWld4elpTQjdDZ2tKQ1FsMGJYQTJJRDBnSW1oMGRIQnpPaTh2Y0d4aGVYSmxZV1I1TG1ScGNtVmpkSFJoY0hNdWJtVjBMM0J5TDNOMll5OXlhV2RvZEhOdFlXNWhaMlZ5TG1GemJYZy9VR3hoZVZKcFoyaDBQVEVtVlhObFUybHRjR3hsVG05dVVHVnljMmx6ZEdWdWRFeHBZMlZ1YzJVOU1TWlFiR0Y1Ulc1aFlteGxjbk05TnpnMk5qSTNSRGd0UXpKQk5pMDBORUpGTFRoR09EZ3RNRGhCUlRJMU5VSXdNVUUzSWpzS0NRa0pmUW9KQ1Fsd2JHRjVaWEl4TG1OdmJtWnBaM1Z5WlNoN0lITjBjbVZoYldsdVp5QTZJSHNnYzIxaGJHeEhZWEJNYVcxcGRDQTZJSFJ0Y0N3Z2FuVnRjRXhoY21kbFIyRndjeUE2SUhSdGNESjlMQ0JrY20wZ09pQjdJSE5sY25abGNuTWdPaUI3SUNKamIyMHVkMmxrWlhacGJtVXVZV3h3YUdFaUlEb2dkRzF3TkN3Z0ltTnZiUzV0YVdOeWIzTnZablF1Y0d4aGVYSmxZV1I1SWlBNklIUnRjRFo5ZlgwcE93b0pDUWwyWVhJZ2NHeGhlV1Z5TWlBOUlIQnNZWGxsY2pzS0NRa0pkbUZ5SUhSdGNEZzdDZ2tKQ1haaGNpQjBiWEE1T3dvSkNRbHBaaWhCY21kaGJpNWhjbWR6SUNFOUlHNTFiR3dwSUhzS0NRa0pDWFpoY2lCZmRHaHBjemdnUFNCQmNtZGhiaTVoY21kek93b0pDUWtKZEcxd09TQTlJRjlmYldGd1gzSmxjMlZ5ZG1Wa1d5SnpaWFJVWlhoMFZISmhZMnRXYVhOcFltbHNhWFI1SWwwZ0lUMGdiblZzYkNBL0lGOTBhR2x6T0M1bGVHbHpkSE5TWlhObGNuWmxaQ2dpYzJWMFZHVjRkRlJ5WVdOclZtbHphV0pwYkdsMGVTSXBJRG9nWDNSb2FYTTRMbWd1YUdGelQzZHVVSEp2Y0dWeWRIa29Jbk5sZEZSbGVIUlVjbUZqYTFacGMybGlhV3hwZEhraUtUc0tDUWtKZlNCbGJITmxJSHNLQ1FrSkNYUnRjRGtnUFNCbVlXeHpaVHNLQ1FrSmZRb0pDUWxwWmloMGJYQTVLU0I3Q2drSkNRbDJZWElnWDNSb2FYTTVJRDBnUVhKbllXNHVZWEpuY3pzS0NRa0pDWFpoY2lCZk1TQTlJRjlmYldGd1gzSmxjMlZ5ZG1Wa1d5SnpaWFJVWlhoMFZISmhZMnRXYVhOcFltbHNhWFI1SWwwZ0lUMGdiblZzYkNBL0lGOTBhR2x6T1M1blpYUlNaWE5sY25abFpDZ2ljMlYwVkdWNGRGUnlZV05yVm1semFXSnBiR2wwZVNJcElEb2dYM1JvYVhNNUxtaGJJbk5sZEZSbGVIUlVjbUZqYTFacGMybGlhV3hwZEhraVhUc0tDUWtKQ1hSdGNEZ2dQU0IwZVhCbGIyWW9YekVwSUQwOUlDSmliMjlzWldGdUlpQS9JRjh4SURvZ1h6RWdJVDBnSW1aaGJITmxJanNLQ1FrSmZTQmxiSE5sSUhzS0NRa0pDWFJ0Y0RnZ1BTQjBjblZsT3dvSkNRbDlDZ2tKQ1hCc1lYbGxjakl1YzJWMFZHVjRkRlJ5WVdOclZtbHphV0pwYkdsMGVTaDBiWEE0S1RzS0NRa0pjR3hoZVdWeUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ltVnljbTl5SWl4dmJrVnljbTl5UlhabGJuUXBPd29KQ1FsMllYSWdjSEp2YldselpTQTlJSEJzWVhsbGNpNXNiMkZrS0hWeWFTazdDZ2tKQ1hCeWIyMXBjMlV1ZEdobGJpaG1kVzVqZEdsdmJpaGZNaWtnZXdvSkNRa0pkbUZ5SUdGa1pFMWxiblVnUFNCM2FXNWtiM2N1WVdSa1RXVnVkVHNLQ1FrSkNYWmhjaUIyWVhKcFlXNTBWSEpoWTJ0elRHbHpkQ0E5SUhCc1lYbGxjaTVuWlhSV1lYSnBZVzUwVkhKaFkydHpLQ2s3Q2drSkNRbDJZWElnZG1GeWFXRnVkRlJ5WVdOcmN5QTlJRnQ3SUhScGRHeGxJRG9nSWtGMWRHOGdjM2RwZEdOb0lpd2dhVzVtYnlBNklHNTFiR3g5WFRzS0NRa0pDWFpoY2lCZlp5QTlJREE3Q2drSkNRbDNhR2xzWlNoZlp5QThJSFpoY21saGJuUlVjbUZqYTNOTWFYTjBMbXhsYm1kMGFDa2dld29KQ1FrSkNYWmhjaUJwYm1adklEMGdkbUZ5YVdGdWRGUnlZV05yYzB4cGMzUmJYMmRkT3dvSkNRa0pDU3NyWDJjN0Nna0pDUWtKZG1GeUlHSjNJRDBnVFdGMGFDNWpaV2xzS0dsdVptOHVkbWxrWlc5Q1lXNWtkMmxrZEdnZ0x5QXhNREF3S1RzS0NRa0pDUWxpZHlBdFBTQmlkeUFsSURVd093b0pDUWtKQ1haaGNtbGhiblJVY21GamEzTXVjSFZ6YUNoN0lIUnBkR3hsSURvZ0lpSWdLeUJwYm1adkxuSnZiR1Z6V3pCZElDc2dJam9pSUNzZ1luY2dLeUFpYXlBaUlDc2dVM1JrTG5OMGNtbHVaeWhwYm1adkxuWnBaR1Z2UTI5a1pXTXBJQ3NnSWlBdklDSWdLeUJOWVhSb0xuSnZkVzVrS0dsdVptOHVZWFZrYVc5Q1lXNWtkMmxrZEdnZ0x5QXhNREF3S1NBcklDSnJJQ0lnS3lCVGRHUXVjM1J5YVc1bktHbHVabTh1WVhWa2FXOURiMlJsWXlrc0lHbHVabThnT2lCcGJtWnZmU2s3Q2drSkNRbDlDZ2tKQ1FsaFpHUk5aVzUxS0NKV1lYSnBZVzUwSUhSeVlXTnJjeUlzZG1GeWFXRnVkRlJ5WVdOcmN5eG1kVzVqZEdsdmJpaGxLU0I3Q2drSkNRa0phV1lvWlM1MFlYSm5aWFF1YzJWc1pXTjBaV1JQY0hScGIyNXpXekJkTG1sdVptOGdQVDBnYm5Wc2JDa2dld29KQ1FrSkNRbHdiR0Y1WlhJdVkyOXVabWxuZFhKbEtIc2dZV0p5SURvZ2V5QmxibUZpYkdWa0lEb2dkSEoxWlgxOUtUc0tDUWtKQ1FsOUlHVnNjMlVnZXdvSkNRa0pDUWx3YkdGNVpYSXVZMjl1Wm1sbmRYSmxLSHNnWVdKeUlEb2dleUJsYm1GaWJHVmtJRG9nWm1Gc2MyVjlmU2s3Q2drSkNRa0pDWEJzWVhsbGNpNXpaV3hsWTNSV1lYSnBZVzUwVkhKaFkyc29aUzUwWVhKblpYUXVjMlZzWldOMFpXUlBjSFJwYjI1eld6QmRMbWx1Wm04c2RISjFaU2s3Q2drSkNRa0pmUW9KQ1FrSmZTazdDZ2tKQ1FsMllYSWdZWFZrYVc5TVlXNW5kV0ZuWlhOQmJtUlNiMnhsY3lBOUlIQnNZWGxsY2k1blpYUkJkV1JwYjB4aGJtZDFZV2RsYzBGdVpGSnZiR1Z6S0NrN0Nna0pDUWwyWVhJZ1lYVmthVzlVY21GamEzTWdQU0JiWFRzS0NRa0pDWFpoY2lCZlp6RWdQU0F3T3dvSkNRa0pkMmhwYkdVb1gyY3hJRHdnWVhWa2FXOU1ZVzVuZFdGblpYTkJibVJTYjJ4bGN5NXNaVzVuZEdncElIc0tDUWtKQ1FsMllYSWdhVzVtYnpFZ1BTQmhkV1JwYjB4aGJtZDFZV2RsYzBGdVpGSnZiR1Z6VzE5bk1WMDdDZ2tKQ1FrSkt5dGZaekU3Q2drSkNRa0pZWFZrYVc5VWNtRmphM011Y0hWemFDaDdJSFJwZEd4bElEb2dJaUlnS3lCVGRHUXVjM1J5YVc1bktHbHVabTh4TG5KdmJHVXBJQ3NnSWpvaUlDc2dVM1JrTG5OMGNtbHVaeWhwYm1adk1TNXNZVzVuZFdGblpTa3NJR2x1Wm04Z09pQnBibVp2TVgwcE93b0pDUWtKZlFvSkNRa0pZV1JrVFdWdWRTZ2lRWFZrYVc4Z2RISmhZMnR6SWl4aGRXUnBiMVJ5WVdOcmN5eG1kVzVqZEdsdmJpaGxNU2tnZXdvSkNRa0pDWEJzWVhsbGNpNXpaV3hsWTNSQmRXUnBiMHhoYm1kMVlXZGxLR1V4TG5SaGNtZGxkQzV6Wld4bFkzUmxaRTl3ZEdsdmJuTmJNRjB1YVc1bWJ5NXNZVzVuZFdGblpTeGxNUzUwWVhKblpYUXVjMlZzWldOMFpXUlBjSFJwYjI1eld6QmRMbWx1Wm04dWNtOXNaU2s3Q2drSkNRbDlLVHNLQ1FrSkNYWmhjaUIwWlhoMFRHRnVaM1ZoWjJWelFXNWtVbTlzWlhNZ1BTQndiR0Y1WlhJdVoyVjBWR1Y0ZEV4aGJtZDFZV2RsYzBGdVpGSnZiR1Z6S0NrN0Nna0pDUWwyWVhJZ2RHVjRkRlJ5WVdOcmN5QTlJRnRkT3dvSkNRa0pkbUZ5SUY5bk1pQTlJREE3Q2drSkNRbDNhR2xzWlNoZlp6SWdQQ0IwWlhoMFRHRnVaM1ZoWjJWelFXNWtVbTlzWlhNdWJHVnVaM1JvS1NCN0Nna0pDUWtKZG1GeUlHbHVabTh5SUQwZ2RHVjRkRXhoYm1kMVlXZGxjMEZ1WkZKdmJHVnpXMTluTWwwN0Nna0pDUWtKS3l0Zlp6STdDZ2tKQ1FrSmRHVjRkRlJ5WVdOcmN5NXdkWE5vS0hzZ2RHbDBiR1VnT2lBaUlpQXJJRk4wWkM1emRISnBibWNvYVc1bWJ6SXVjbTlzWlNrZ0t5QWlPaUlnS3lCVGRHUXVjM1J5YVc1bktHbHVabTh5TG14aGJtZDFZV2RsS1N3Z2FXNW1ieUE2SUdsdVptOHlmU2s3Q2drSkNRbDlDZ2tKQ1FscFppaDBaWGgwVkhKaFkydHpMbXhsYm1kMGFDQStJREFwSUhzS0NRa0pDUWxoWkdSTlpXNTFLQ0pVWlhoMElIUnlZV05yY3lJc2RHVjRkRlJ5WVdOcmN5eG1kVzVqZEdsdmJpaGxNaWtnZXdvSkNRa0pDUWx3YkdGNVpYSXVjMlZzWldOMFZHVjRkRXhoYm1kMVlXZGxLR1V5TG5SaGNtZGxkQzV6Wld4bFkzUmxaRTl3ZEdsdmJuTmJNRjB1YVc1bWJ5NXNZVzVuZFdGblpTeGxNaTUwWVhKblpYUXVjMlZzWldOMFpXUlBjSFJwYjI1eld6QmRMbWx1Wm04dWNtOXNaU2s3Q2drSkNRa0pmU2s3Q2drSkNRbDlDZ2tKQ1FseVpYUjFjbTQ3Q2drSkNYMHBMbU5oZEdOb0tHOXVSWEp5YjNJcE93b0pDWDBLQ1gwS2ZUc0tVMmhoYTJFdVpYaHdiM05sWDNCc1lYbGxjaUE5SUdaMWJtTjBhVzl1S0hBcElIc0tDWGRwYm1SdmR5NXdiR0Y1WlhJZ1BTQndPd29KY21WMGRYSnVJSEE3Q24wN0NuWmhjaUJUZEdRZ1BTQm1kVzVqZEdsdmJpZ3BJSHNnZlRzS0pHaDRRMnhoYzNObGMxc2lVM1JrSWwwZ1BTQlRkR1E3Q2xOMFpDNWZYMjVoYldWZlh5QTlJSFJ5ZFdVN0NsTjBaQzV6ZEhKcGJtY2dQU0JtZFc1amRHbHZiaWh6S1NCN0NnbHlaWFIxY200Z2FuTmZRbTl2ZEM1ZlgzTjBjbWx1WjE5eVpXTW9jeXdpSWlrN0NuMDdDblpoY2lCVWVYQmxJRDBnWm5WdVkzUnBiMjRvS1NCN0lIMDdDaVJvZUVOc1lYTnpaWE5iSWxSNWNHVWlYU0E5SUZSNWNHVTdDbFI1Y0dVdVgxOXVZVzFsWDE4Z1BTQjBjblZsT3dwVWVYQmxMbU55WldGMFpVVnVkVzBnUFNCbWRXNWpkR2x2YmlobExHTnZibk4wY2l4d1lYSmhiWE1wSUhzS0NYWmhjaUJtSUQwZ1VtVm1iR1ZqZEM1bWFXVnNaQ2hsTEdOdmJuTjBjaWs3Q2dscFppaG1JRDA5SUc1MWJHd3BJSHNLQ1FsMGFISnZkeUJ1WlhjZ2FuTmZYeVJDYjI5MFgwaGhlR1ZGY25KdmNpZ2lUbThnYzNWamFDQmpiMjV6ZEhKMVkzUnZjaUFpSUNzZ1kyOXVjM1J5S1RzS0NYMEtDV2xtS0ZKbFpteGxZM1F1YVhOR2RXNWpkR2x2YmlobUtTa2dld29KQ1dsbUtIQmhjbUZ0Y3lBOVBTQnVkV3hzS1NCN0Nna0pDWFJvY205M0lHNWxkeUJxYzE5ZkpFSnZiM1JmU0dGNFpVVnljbTl5S0NKRGIyNXpkSEoxWTNSdmNpQWlJQ3NnWTI5dWMzUnlJQ3NnSWlCdVpXVmtJSEJoY21GdFpYUmxjbk1pS1RzS0NRbDlDZ2tKY21WMGRYSnVJR1l1WVhCd2JIa29aU3h3WVhKaGJYTXBPd29KZlFvSmFXWW9jR0Z5WVcxeklDRTlJRzUxYkd3Z0ppWWdjR0Z5WVcxekxteGxibWQwYUNBaFBTQXdLU0I3Q2drSmRHaHliM2NnYm1WM0lHcHpYMThrUW05dmRGOUlZWGhsUlhKeWIzSW9Ja052Ym5OMGNuVmpkRzl5SUNJZ0t5QmpiMjV6ZEhJZ0t5QWlJR1J2WlhNZ2JtOTBJRzVsWldRZ2NHRnlZVzFsZEdWeWN5SXBPd29KZlFvSmNtVjBkWEp1SUdZN0NuMDdDblpoY2lCb1lYaGxYMGxOWVhBZ1BTQm1kVzVqZEdsdmJpZ3BJSHNnZlRzS0pHaDRRMnhoYzNObGMxc2lhR0Y0WlM1SlRXRndJbDBnUFNCb1lYaGxYMGxOWVhBN0NtaGhlR1ZmU1UxaGNDNWZYMjVoYldWZlh5QTlJSFJ5ZFdVN0NuWmhjaUJvWVhobFgxSmxjMjkxY21ObElEMGdablZ1WTNScGIyNG9LU0I3SUgwN0NpUm9lRU5zWVhOelpYTmJJbWhoZUdVdVVtVnpiM1Z5WTJVaVhTQTlJR2hoZUdWZlVtVnpiM1Z5WTJVN0NtaGhlR1ZmVW1WemIzVnlZMlV1WDE5dVlXMWxYMThnUFNCMGNuVmxPd3BvWVhobFgxSmxjMjkxY21ObExtZGxkRk4wY21sdVp5QTlJR1oxYm1OMGFXOXVLRzVoYldVcElIc0tDWFpoY2lCZlp5QTlJREE3Q2dsMllYSWdYMmN4SUQwZ2FHRjRaVjlTWlhOdmRYSmpaUzVqYjI1MFpXNTBPd29KZDJocGJHVW9YMmNnUENCZlp6RXViR1Z1WjNSb0tTQjdDZ2tKZG1GeUlIZ2dQU0JmWnpGYlgyZGRPd29KQ1NzclgyYzdDZ2tKYVdZb2VDNXVZVzFsSUQwOUlHNWhiV1VwSUhzS0NRa0phV1lvZUM1emRISWdJVDBnYm5Wc2JDa2dld29KQ1FrSmNtVjBkWEp1SUhndWMzUnlPd29KQ1FsOUNna0pDWFpoY2lCaUlEMGdhR0Y0WlY5amNubHdkRzlmUW1GelpUWTBMbVJsWTI5a1pTaDRMbVJoZEdFcE93b0pDUWx5WlhSMWNtNGdZaTUwYjFOMGNtbHVaeWdwT3dvSkNYMEtDWDBLQ1hKbGRIVnliaUJ1ZFd4c093cDlPd3AyWVhJZ2FHRjRaVjlmSkZWdWMyVnlhV0ZzYVhwbGNsOUVaV1poZFd4MFVtVnpiMngyWlhJZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLZlRzS0pHaDRRMnhoYzNObGMxc2lhR0Y0WlM1ZlZXNXpaWEpwWVd4cGVtVnlMa1JsWm1GMWJIUlNaWE52YkhabGNpSmRJRDBnYUdGNFpWOWZKRlZ1YzJWeWFXRnNhWHBsY2w5RVpXWmhkV3gwVW1WemIyeDJaWEk3Q21oaGVHVmZYeVJWYm5ObGNtbGhiR2w2WlhKZlJHVm1ZWFZzZEZKbGMyOXNkbVZ5TGw5ZmJtRnRaVjlmSUQwZ2RISjFaVHNLYUdGNFpWOWZKRlZ1YzJWeWFXRnNhWHBsY2w5RVpXWmhkV3gwVW1WemIyeDJaWEl1Y0hKdmRHOTBlWEJsSUQwZ2V3b0pjbVZ6YjJ4MlpVTnNZWE56T2lCbWRXNWpkR2x2YmlodVlXMWxLU0I3Q2drSmNtVjBkWEp1SUNSb2VFTnNZWE56WlhOYmJtRnRaVjA3Q2dsOUNna3NjbVZ6YjJ4MlpVVnVkVzA2SUdaMWJtTjBhVzl1S0c1aGJXVXBJSHNLQ1FseVpYUjFjbTRnSkdoNFJXNTFiWE5iYm1GdFpWMDdDZ2w5Q24wN0NuWmhjaUJvWVhobFgxVnVjMlZ5YVdGc2FYcGxjaUE5SUdaMWJtTjBhVzl1S0dKMVppa2dld29KZEdocGN5NWlkV1lnUFNCaWRXWTdDZ2wwYUdsekxteGxibWQwYUNBOUlHSjFaaTVzWlc1bmRHZzdDZ2wwYUdsekxuQnZjeUE5SURBN0NnbDBhR2x6TG5OallXTm9aU0E5SUZ0ZE93b0pkR2hwY3k1allXTm9aU0E5SUZ0ZE93b0pkbUZ5SUhJZ1BTQm9ZWGhsWDFWdWMyVnlhV0ZzYVhwbGNpNUVSVVpCVlV4VVgxSkZVMDlNVmtWU093b0phV1lvY2lBOVBTQnVkV3hzS1NCN0Nna0pjaUE5SUc1bGR5Qm9ZWGhsWDE4a1ZXNXpaWEpwWVd4cGVtVnlYMFJsWm1GMWJIUlNaWE52YkhabGNpZ3BPd29KQ1doaGVHVmZWVzV6WlhKcFlXeHBlbVZ5TGtSRlJrRlZURlJmVWtWVFQweFdSVklnUFNCeU93b0pmUW9KZEdocGN5NXlaWE52YkhabGNpQTlJSEk3Q24wN0NpUm9lRU5zWVhOelpYTmJJbWhoZUdVdVZXNXpaWEpwWVd4cGVtVnlJbDBnUFNCb1lYaGxYMVZ1YzJWeWFXRnNhWHBsY2pzS2FHRjRaVjlWYm5ObGNtbGhiR2w2WlhJdVgxOXVZVzFsWDE4Z1BTQjBjblZsT3dwb1lYaGxYMVZ1YzJWeWFXRnNhWHBsY2k1cGJtbDBRMjlrWlhNZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLQ1haaGNpQmpiMlJsY3lBOUlGdGRPd29KZG1GeUlGOW5JRDBnTURzS0NYWmhjaUJmWnpFZ1BTQm9ZWGhsWDFWdWMyVnlhV0ZzYVhwbGNpNUNRVk5GTmpRdWJHVnVaM1JvT3dvSmQyaHBiR1VvWDJjZ1BDQmZaekVwSUhzS0NRbDJZWElnYVNBOUlGOW5LeXM3Q2drSlkyOWtaWE5iYUdGNFpWOVZibk5sY21saGJHbDZaWEl1UWtGVFJUWTBMbU5vWVhKRGIyUmxRWFFvYVNsZElEMGdhVHNLQ1gwS0NYSmxkSFZ5YmlCamIyUmxjenNLZlRzS2FHRjRaVjlWYm5ObGNtbGhiR2w2WlhJdWNuVnVJRDBnWm5WdVkzUnBiMjRvZGlrZ2V3b0pjbVYwZFhKdUlHNWxkeUJvWVhobFgxVnVjMlZ5YVdGc2FYcGxjaWgyS1M1MWJuTmxjbWxoYkdsNlpTZ3BPd3A5T3dwb1lYaGxYMVZ1YzJWeWFXRnNhWHBsY2k1d2NtOTBiM1I1Y0dVZ1BTQjdDZ2x5WldGa1JHbG5hWFJ6T2lCbWRXNWpkR2x2YmlncElIc0tDUWwyWVhJZ2F5QTlJREE3Q2drSmRtRnlJSE1nUFNCbVlXeHpaVHNLQ1FsMllYSWdabkJ2Y3lBOUlIUm9hWE11Y0c5ek93b0pDWGRvYVd4bEtIUnlkV1VwSUhzS0NRa0pkbUZ5SUdNZ1BTQjBhR2x6TG1KMVppNWphR0Z5UTI5a1pVRjBLSFJvYVhNdWNHOXpLVHNLQ1FrSmFXWW9ZeUFoUFNCaktTQjdDZ2tKQ1FsaWNtVmhhenNLQ1FrSmZRb0pDUWxwWmloaklEMDlJRFExS1NCN0Nna0pDUWxwWmloMGFHbHpMbkJ2Y3lBaFBTQm1jRzl6S1NCN0Nna0pDUWtKWW5KbFlXczdDZ2tKQ1FsOUNna0pDUWx6SUQwZ2RISjFaVHNLQ1FrSkNYUm9hWE11Y0c5ekt5czdDZ2tKQ1FsamIyNTBhVzUxWlRzS0NRa0pmUW9KQ1FscFppaGpJRHdnTkRnZ2ZId2dZeUErSURVM0tTQjdDZ2tKQ1FsaWNtVmhhenNLQ1FrSmZRb0pDUWxySUQwZ2F5QXFJREV3SUNzZ0tHTWdMU0EwT0NrN0Nna0pDWFJvYVhNdWNHOXpLeXM3Q2drSmZRb0pDV2xtS0hNcElIc0tDUWtKYXlBcVBTQXRNVHNLQ1FsOUNna0pjbVYwZFhKdUlHczdDZ2w5Q2drc2NtVmhaRVpzYjJGME9pQm1kVzVqZEdsdmJpZ3BJSHNLQ1FsMllYSWdjREVnUFNCMGFHbHpMbkJ2Y3pzS0NRbDNhR2xzWlNoMGNuVmxLU0I3Q2drSkNYWmhjaUJqSUQwZ2RHaHBjeTVpZFdZdVkyaGhja052WkdWQmRDaDBhR2x6TG5CdmN5azdDZ2tKQ1dsbUtHTWdJVDBnWXlrZ2V3b0pDUWtKWW5KbFlXczdDZ2tKQ1gwS0NRa0phV1lvWXlBK1BTQTBNeUFtSmlCaklEd2dOVGdnZkh3Z1l5QTlQU0F4TURFZ2ZId2dZeUE5UFNBMk9Ta2dld29KQ1FrSmRHaHBjeTV3YjNNckt6c0tDUWtKZlNCbGJITmxJSHNLQ1FrSkNXSnlaV0ZyT3dvSkNRbDlDZ2tKZlFvSkNYSmxkSFZ5YmlCd1lYSnpaVVpzYjJGMEtFaDRUM1psY25KcFpHVnpMbk4xWW5OMGNpaDBhR2x6TG1KMVppeHdNU3gwYUdsekxuQnZjeUF0SUhBeEtTazdDZ2w5Q2drc2RXNXpaWEpwWVd4cGVtVlBZbXBsWTNRNklHWjFibU4wYVc5dUtHOHBJSHNLQ1FsM2FHbHNaU2gwY25WbEtTQjdDZ2tKQ1dsbUtIUm9hWE11Y0c5eklENDlJSFJvYVhNdWJHVnVaM1JvS1NCN0Nna0pDUWwwYUhKdmR5QnVaWGNnYW5OZlh5UkNiMjkwWDBoaGVHVkZjbkp2Y2lnaVNXNTJZV3hwWkNCdlltcGxZM1FpS1RzS0NRa0pmUW9KQ1FscFppaDBhR2x6TG1KMVppNWphR0Z5UTI5a1pVRjBLSFJvYVhNdWNHOXpLU0E5UFNBeE1ETXBJSHNLQ1FrSkNXSnlaV0ZyT3dvSkNRbDlDZ2tKQ1haaGNpQnJJRDBnZEdocGN5NTFibk5sY21saGJHbDZaU2dwT3dvSkNRbHBaaWgwZVhCbGIyWW9heWtnSVQwZ0luTjBjbWx1WnlJcElIc0tDUWtKQ1hSb2NtOTNJRzVsZHlCcWMxOWZKRUp2YjNSZlNHRjRaVVZ5Y205eUtDSkpiblpoYkdsa0lHOWlhbVZqZENCclpYa2lLVHNLQ1FrSmZRb0pDUWwyWVhJZ2RpQTlJSFJvYVhNdWRXNXpaWEpwWVd4cGVtVW9LVHNLQ1FrSmIxdHJYU0E5SUhZN0Nna0pmUW9KQ1hSb2FYTXVjRzl6S3lzN0NnbDlDZ2tzZFc1elpYSnBZV3hwZW1WRmJuVnRPaUJtZFc1amRHbHZiaWhsWkdWamJDeDBZV2NwSUhzS0NRbHBaaWgwYUdsekxtSjFaaTVqYUdGeVEyOWtaVUYwS0hSb2FYTXVjRzl6S3lzcElDRTlJRFU0S1NCN0Nna0pDWFJvY205M0lHNWxkeUJxYzE5ZkpFSnZiM1JmU0dGNFpVVnljbTl5S0NKSmJuWmhiR2xrSUdWdWRXMGdabTl5YldGMElpazdDZ2tKZlFvSkNYWmhjaUJ1WVhKbmN5QTlJSFJvYVhNdWNtVmhaRVJwWjJsMGN5Z3BPd29KQ1dsbUtHNWhjbWR6SUQwOUlEQXBJSHNLQ1FrSmNtVjBkWEp1SUZSNWNHVXVZM0psWVhSbFJXNTFiU2hsWkdWamJDeDBZV2NwT3dvSkNYMEtDUWwyWVhJZ1lYSm5jeUE5SUZ0ZE93b0pDWGRvYVd4bEtHNWhjbWR6TFMwZ1BpQXdLU0JoY21kekxuQjFjMmdvZEdocGN5NTFibk5sY21saGJHbDZaU2dwS1RzS0NRbHlaWFIxY200Z1ZIbHdaUzVqY21WaGRHVkZiblZ0S0dWa1pXTnNMSFJoWnl4aGNtZHpLVHNLQ1gwS0NTeDFibk5sY21saGJHbDZaVG9nWm5WdVkzUnBiMjRvS1NCN0Nna0pjM2RwZEdOb0tIUm9hWE11WW5WbUxtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTXJLeWtwSUhzS0NRbGpZWE5sSURZMU9nb0pDUWwyWVhJZ2JtRnRaU0E5SUhSb2FYTXVkVzV6WlhKcFlXeHBlbVVvS1RzS0NRa0pkbUZ5SUdOc0lEMGdkR2hwY3k1eVpYTnZiSFpsY2k1eVpYTnZiSFpsUTJ4aGMzTW9ibUZ0WlNrN0Nna0pDV2xtS0dOc0lEMDlJRzUxYkd3cElIc0tDUWtKQ1hSb2NtOTNJRzVsZHlCcWMxOWZKRUp2YjNSZlNHRjRaVVZ5Y205eUtDSkRiR0Z6Y3lCdWIzUWdabTkxYm1RZ0lpQXJJRzVoYldVcE93b0pDUWw5Q2drSkNYSmxkSFZ5YmlCamJEc0tDUWxqWVhObElEWTJPZ29KQ1FsMllYSWdibUZ0WlRFZ1BTQjBhR2x6TG5WdWMyVnlhV0ZzYVhwbEtDazdDZ2tKQ1haaGNpQmxJRDBnZEdocGN5NXlaWE52YkhabGNpNXlaWE52YkhabFJXNTFiU2h1WVcxbE1TazdDZ2tKQ1dsbUtHVWdQVDBnYm5Wc2JDa2dld29KQ1FrSmRHaHliM2NnYm1WM0lHcHpYMThrUW05dmRGOUlZWGhsUlhKeWIzSW9Ja1Z1ZFcwZ2JtOTBJR1p2ZFc1a0lDSWdLeUJ1WVcxbE1TazdDZ2tKQ1gwS0NRa0pjbVYwZFhKdUlHVTdDZ2tKWTJGelpTQTJOem9LQ1FrSmRtRnlJRzVoYldVeUlEMGdkR2hwY3k1MWJuTmxjbWxoYkdsNlpTZ3BPd29KQ1FsMllYSWdZMnd4SUQwZ2RHaHBjeTV5WlhOdmJIWmxjaTV5WlhOdmJIWmxRMnhoYzNNb2JtRnRaVElwT3dvSkNRbHBaaWhqYkRFZ1BUMGdiblZzYkNrZ2V3b0pDUWtKZEdoeWIzY2dibVYzSUdwelgxOGtRbTl2ZEY5SVlYaGxSWEp5YjNJb0lrTnNZWE56SUc1dmRDQm1iM1Z1WkNBaUlDc2dibUZ0WlRJcE93b0pDUWw5Q2drSkNYWmhjaUJ2SUQwZ1QySnFaV04wTG1OeVpXRjBaU2hqYkRFdWNISnZkRzkwZVhCbEtUc0tDUWtKZEdocGN5NWpZV05vWlM1d2RYTm9LRzhwT3dvSkNRbHZMbWg0Vlc1elpYSnBZV3hwZW1Vb2RHaHBjeWs3Q2drSkNXbG1LSFJvYVhNdVluVm1MbU5vWVhKRGIyUmxRWFFvZEdocGN5NXdiM01yS3lrZ0lUMGdNVEF6S1NCN0Nna0pDUWwwYUhKdmR5QnVaWGNnYW5OZlh5UkNiMjkwWDBoaGVHVkZjbkp2Y2lnaVNXNTJZV3hwWkNCamRYTjBiMjBnWkdGMFlTSXBPd29KQ1FsOUNna0pDWEpsZEhWeWJpQnZPd29KQ1dOaGMyVWdOemM2Q2drSkNYWmhjaUJvSUQwZ2JtVjNJR2hoZUdWZlpITmZUMkpxWldOMFRXRndLQ2s3Q2drSkNYUm9hWE11WTJGamFHVXVjSFZ6YUNob0tUc0tDUWtKZG1GeUlHSjFaaUE5SUhSb2FYTXVZblZtT3dvSkNRbDNhR2xzWlNoMGFHbHpMbUoxWmk1amFHRnlRMjlrWlVGMEtIUm9hWE11Y0c5ektTQWhQU0F4TURRcElIc0tDUWtKQ1haaGNpQnpJRDBnZEdocGN5NTFibk5sY21saGJHbDZaU2dwT3dvSkNRa0phQzV6WlhRb2N5eDBhR2x6TG5WdWMyVnlhV0ZzYVhwbEtDa3BPd29KQ1FsOUNna0pDWFJvYVhNdWNHOXpLeXM3Q2drSkNYSmxkSFZ5YmlCb093b0pDV05oYzJVZ09ESTZDZ2tKQ1haaGNpQnVJRDBnZEdocGN5NXlaV0ZrUkdsbmFYUnpLQ2s3Q2drSkNXbG1LRzRnUENBd0lIeDhJRzRnUGowZ2RHaHBjeTV6WTJGamFHVXViR1Z1WjNSb0tTQjdDZ2tKQ1FsMGFISnZkeUJ1WlhjZ2FuTmZYeVJDYjI5MFgwaGhlR1ZGY25KdmNpZ2lTVzUyWVd4cFpDQnpkSEpwYm1jZ2NtVm1aWEpsYm1ObElpazdDZ2tKQ1gwS0NRa0pjbVYwZFhKdUlIUm9hWE11YzJOaFkyaGxXMjVkT3dvSkNXTmhjMlVnT1RjNkNna0pDWFpoY2lCaWRXWXhJRDBnZEdocGN5NWlkV1k3Q2drSkNYWmhjaUJoSUQwZ1cxMDdDZ2tKQ1hSb2FYTXVZMkZqYUdVdWNIVnphQ2hoS1RzS0NRa0pkMmhwYkdVb2RISjFaU2tnZXdvSkNRa0pkbUZ5SUdNZ1BTQjBhR2x6TG1KMVppNWphR0Z5UTI5a1pVRjBLSFJvYVhNdWNHOXpLVHNLQ1FrSkNXbG1LR01nUFQwZ01UQTBLU0I3Q2drSkNRa0pkR2hwY3k1d2IzTXJLenNLQ1FrSkNRbGljbVZoYXpzS0NRa0pDWDBLQ1FrSkNXbG1LR01nUFQwZ01URTNLU0I3Q2drSkNRa0pkR2hwY3k1d2IzTXJLenNLQ1FrSkNRbDJZWElnYmpFZ1BTQjBhR2x6TG5KbFlXUkVhV2RwZEhNb0tUc0tDUWtKQ1FsaFcyRXViR1Z1WjNSb0lDc2diakVnTFNBeFhTQTlJRzUxYkd3N0Nna0pDUWw5SUdWc2MyVWdld29KQ1FrSkNXRXVjSFZ6YUNoMGFHbHpMblZ1YzJWeWFXRnNhWHBsS0NrcE93b0pDUWtKZlFvSkNRbDlDZ2tKQ1hKbGRIVnliaUJoT3dvSkNXTmhjMlVnT1RnNkNna0pDWFpoY2lCb01TQTlJRzVsZHlCb1lYaGxYMlJ6WDFOMGNtbHVaMDFoY0NncE93b0pDUWwwYUdsekxtTmhZMmhsTG5CMWMyZ29hREVwT3dvSkNRbDJZWElnWW5WbU1pQTlJSFJvYVhNdVluVm1Pd29KQ1FsM2FHbHNaU2gwYUdsekxtSjFaaTVqYUdGeVEyOWtaVUYwS0hSb2FYTXVjRzl6S1NBaFBTQXhNRFFwSUhzS0NRa0pDWFpoY2lCek1TQTlJSFJvYVhNdWRXNXpaWEpwWVd4cGVtVW9LVHNLQ1FrSkNYWmhjaUIyWVd4MVpTQTlJSFJvYVhNdWRXNXpaWEpwWVd4cGVtVW9LVHNLQ1FrSkNXbG1LRjlmYldGd1gzSmxjMlZ5ZG1Wa1czTXhYU0FoUFNCdWRXeHNLU0I3Q2drSkNRa0phREV1YzJWMFVtVnpaWEoyWldRb2N6RXNkbUZzZFdVcE93b0pDUWtKZlNCbGJITmxJSHNLQ1FrSkNRbG9NUzVvVzNNeFhTQTlJSFpoYkhWbE93b0pDUWtKZlFvSkNRbDlDZ2tKQ1hSb2FYTXVjRzl6S3lzN0Nna0pDWEpsZEhWeWJpQm9NVHNLQ1FsallYTmxJRGs1T2dvSkNRbDJZWElnYm1GdFpUTWdQU0IwYUdsekxuVnVjMlZ5YVdGc2FYcGxLQ2s3Q2drSkNYWmhjaUJqYkRJZ1BTQjBhR2x6TG5KbGMyOXNkbVZ5TG5KbGMyOXNkbVZEYkdGemN5aHVZVzFsTXlrN0Nna0pDV2xtS0dOc01pQTlQU0J1ZFd4c0tTQjdDZ2tKQ1FsMGFISnZkeUJ1WlhjZ2FuTmZYeVJDYjI5MFgwaGhlR1ZGY25KdmNpZ2lRMnhoYzNNZ2JtOTBJR1p2ZFc1a0lDSWdLeUJ1WVcxbE15azdDZ2tKQ1gwS0NRa0pkbUZ5SUc4eElEMGdUMkpxWldOMExtTnlaV0YwWlNoamJESXVjSEp2ZEc5MGVYQmxLVHNLQ1FrSmRHaHBjeTVqWVdOb1pTNXdkWE5vS0c4eEtUc0tDUWtKZEdocGN5NTFibk5sY21saGJHbDZaVTlpYW1WamRDaHZNU2s3Q2drSkNYSmxkSFZ5YmlCdk1Uc0tDUWxqWVhObElERXdNRG9LQ1FrSmNtVjBkWEp1SUhSb2FYTXVjbVZoWkVac2IyRjBLQ2s3Q2drSlkyRnpaU0F4TURJNkNna0pDWEpsZEhWeWJpQm1ZV3h6WlRzS0NRbGpZWE5sSURFd05Ub0tDUWtKY21WMGRYSnVJSFJvYVhNdWNtVmhaRVJwWjJsMGN5Z3BPd29KQ1dOaGMyVWdNVEEyT2dvSkNRbDJZWElnYm1GdFpUUWdQU0IwYUdsekxuVnVjMlZ5YVdGc2FYcGxLQ2s3Q2drSkNYWmhjaUJsWkdWamJDQTlJSFJvYVhNdWNtVnpiMngyWlhJdWNtVnpiMngyWlVWdWRXMG9ibUZ0WlRRcE93b0pDUWxwWmlobFpHVmpiQ0E5UFNCdWRXeHNLU0I3Q2drSkNRbDBhSEp2ZHlCdVpYY2dhbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaWdpUlc1MWJTQnViM1FnWm05MWJtUWdJaUFySUc1aGJXVTBLVHNLQ1FrSmZRb0pDUWwwYUdsekxuQnZjeXNyT3dvSkNRbDJZWElnYVc1a1pYZ2dQU0IwYUdsekxuSmxZV1JFYVdkcGRITW9LVHNLQ1FrSmRtRnlJSFJoWnlBOUlHVmtaV05zTGw5ZlkyOXVjM1J5ZFdOMGMxOWZMbk5zYVdObEtDbGJhVzVrWlhoZE93b0pDUWxwWmloMFlXY2dQVDBnYm5Wc2JDa2dld29KQ1FrSmRHaHliM2NnYm1WM0lHcHpYMThrUW05dmRGOUlZWGhsUlhKeWIzSW9JbFZ1YTI1dmQyNGdaVzUxYlNCcGJtUmxlQ0FpSUNzZ2JtRnRaVFFnS3lBaVFDSWdLeUJwYm1SbGVDazdDZ2tKQ1gwS0NRa0pkbUZ5SUdVeElEMGdkR2hwY3k1MWJuTmxjbWxoYkdsNlpVVnVkVzBvWldSbFkyd3NkR0ZuS1RzS0NRa0pkR2hwY3k1allXTm9aUzV3ZFhOb0tHVXhLVHNLQ1FrSmNtVjBkWEp1SUdVeE93b0pDV05oYzJVZ01UQTNPZ29KQ1FseVpYUjFjbTRnVG1GT093b0pDV05oYzJVZ01UQTRPZ29KQ1FsMllYSWdiQ0E5SUc1bGR5Qm9ZWGhsWDJSelgweHBjM1FvS1RzS0NRa0pkR2hwY3k1allXTm9aUzV3ZFhOb0tHd3BPd29KQ1FsMllYSWdZblZtTXlBOUlIUm9hWE11WW5WbU93b0pDUWwzYUdsc1pTaDBhR2x6TG1KMVppNWphR0Z5UTI5a1pVRjBLSFJvYVhNdWNHOXpLU0FoUFNBeE1EUXBJR3d1WVdSa0tIUm9hWE11ZFc1elpYSnBZV3hwZW1Vb0tTazdDZ2tKQ1hSb2FYTXVjRzl6S3lzN0Nna0pDWEpsZEhWeWJpQnNPd29KQ1dOaGMyVWdNVEE1T2dvSkNRbHlaWFIxY200Z0xVbHVabWx1YVhSNU93b0pDV05oYzJVZ01URXdPZ29KQ1FseVpYUjFjbTRnYm5Wc2JEc0tDUWxqWVhObElERXhNVG9LQ1FrSmRtRnlJRzh5SUQwZ2V5QjlPd29KQ1FsMGFHbHpMbU5oWTJobExuQjFjMmdvYnpJcE93b0pDUWwwYUdsekxuVnVjMlZ5YVdGc2FYcGxUMkpxWldOMEtHOHlLVHNLQ1FrSmNtVjBkWEp1SUc4eU93b0pDV05oYzJVZ01URXlPZ29KQ1FseVpYUjFjbTRnU1c1bWFXNXBkSGs3Q2drSlkyRnpaU0F4TVRNNkNna0pDWFpoY2lCb01pQTlJRzVsZHlCb1lYaGxYMlJ6WDBsdWRFMWhjQ2dwT3dvSkNRbDBhR2x6TG1OaFkyaGxMbkIxYzJnb2FESXBPd29KQ1FsMllYSWdZblZtTkNBOUlIUm9hWE11WW5WbU93b0pDUWwyWVhJZ1l6RWdQU0IwYUdsekxtSjFaaTVqYUdGeVEyOWtaVUYwS0hSb2FYTXVjRzl6S3lzcE93b0pDUWwzYUdsc1pTaGpNU0E5UFNBMU9Da2dld29KQ1FrSmRtRnlJR2tnUFNCMGFHbHpMbkpsWVdSRWFXZHBkSE1vS1RzS0NRa0pDWFpoY2lCMllXeDFaVEVnUFNCMGFHbHpMblZ1YzJWeWFXRnNhWHBsS0NrN0Nna0pDUWxvTWk1b1cybGRJRDBnZG1Gc2RXVXhPd29KQ1FrSll6RWdQU0IwYUdsekxtSjFaaTVqYUdGeVEyOWtaVUYwS0hSb2FYTXVjRzl6S3lzcE93b0pDUWw5Q2drSkNXbG1LR014SUNFOUlERXdOQ2tnZXdvSkNRa0pkR2h5YjNjZ2JtVjNJR3B6WDE4a1FtOXZkRjlJWVhobFJYSnliM0lvSWtsdWRtRnNhV1FnU1c1MFRXRndJR1p2Y20xaGRDSXBPd29KQ1FsOUNna0pDWEpsZEhWeWJpQm9NanNLQ1FsallYTmxJREV4TkRvS0NRa0pkbUZ5SUc0eUlEMGdkR2hwY3k1eVpXRmtSR2xuYVhSektDazdDZ2tKQ1dsbUtHNHlJRHdnTUNCOGZDQnVNaUErUFNCMGFHbHpMbU5oWTJobExteGxibWQwYUNrZ2V3b0pDUWtKZEdoeWIzY2dibVYzSUdwelgxOGtRbTl2ZEY5SVlYaGxSWEp5YjNJb0lrbHVkbUZzYVdRZ2NtVm1aWEpsYm1ObElpazdDZ2tKQ1gwS0NRa0pjbVYwZFhKdUlIUm9hWE11WTJGamFHVmJiakpkT3dvSkNXTmhjMlVnTVRFMU9nb0pDUWwyWVhJZ2JHVnVJRDBnZEdocGN5NXlaV0ZrUkdsbmFYUnpLQ2s3Q2drSkNYWmhjaUJpZFdZMUlEMGdkR2hwY3k1aWRXWTdDZ2tKQ1dsbUtIUm9hWE11WW5WbUxtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTXJLeWtnSVQwZ05UZ2dmSHdnZEdocGN5NXNaVzVuZEdnZ0xTQjBhR2x6TG5CdmN5QThJR3hsYmlrZ2V3b0pDUWtKZEdoeWIzY2dibVYzSUdwelgxOGtRbTl2ZEY5SVlYaGxSWEp5YjNJb0lrbHVkbUZzYVdRZ1lubDBaWE1nYkdWdVozUm9JaWs3Q2drSkNYMEtDUWtKZG1GeUlHTnZaR1Z6SUQwZ2FHRjRaVjlWYm5ObGNtbGhiR2w2WlhJdVEwOUVSVk03Q2drSkNXbG1LR052WkdWeklEMDlJRzUxYkd3cElIc0tDUWtKQ1dOdlpHVnpJRDBnYUdGNFpWOVZibk5sY21saGJHbDZaWEl1YVc1cGRFTnZaR1Z6S0NrN0Nna0pDUWxvWVhobFgxVnVjMlZ5YVdGc2FYcGxjaTVEVDBSRlV5QTlJR052WkdWek93b0pDUWw5Q2drSkNYWmhjaUJwTVNBOUlIUm9hWE11Y0c5ek93b0pDUWwyWVhJZ2NtVnpkQ0E5SUd4bGJpQW1JRE03Q2drSkNYWmhjaUJ6YVhwbElEMGdLR3hsYmlBK1BpQXlLU0FxSURNZ0t5QW9jbVZ6ZENBK1BTQXlJRDhnY21WemRDQXRJREVnT2lBd0tUc0tDUWtKZG1GeUlHMWhlQ0E5SUdreElDc2dLR3hsYmlBdElISmxjM1FwT3dvSkNRbDJZWElnWW5sMFpYTWdQU0J1WlhjZ2FHRjRaVjlwYjE5Q2VYUmxjeWh1WlhjZ1FYSnlZWGxDZFdabVpYSW9jMmw2WlNrcE93b0pDUWwyWVhJZ1luQnZjeUE5SURBN0Nna0pDWGRvYVd4bEtHa3hJRHdnYldGNEtTQjdDZ2tKQ1FsMllYSWdZekV4SUQwZ1kyOWtaWE5iWW5WbU5TNWphR0Z5UTI5a1pVRjBLR2t4S3lzcFhUc0tDUWtKQ1haaGNpQmpNaUE5SUdOdlpHVnpXMkoxWmpVdVkyaGhja052WkdWQmRDaHBNU3NyS1YwN0Nna0pDUWxpZVhSbGN5NWlXMkp3YjNNcksxMGdQU0JqTVRFZ1BEd2dNaUI4SUdNeUlENCtJRFE3Q2drSkNRbDJZWElnWXpNZ1BTQmpiMlJsYzF0aWRXWTFMbU5vWVhKRGIyUmxRWFFvYVRFckt5bGRPd29KQ1FrSllubDBaWE11WWx0aWNHOXpLeXRkSUQwZ1l6SWdQRHdnTkNCOElHTXpJRDQrSURJN0Nna0pDUWwyWVhJZ1l6UWdQU0JqYjJSbGMxdGlkV1kxTG1Ob1lYSkRiMlJsUVhRb2FURXJLeWxkT3dvSkNRa0pZbmwwWlhNdVlsdGljRzl6S3l0ZElEMGdZek1nUER3Z05pQjhJR00wT3dvSkNRbDlDZ2tKQ1dsbUtISmxjM1FnUGowZ01pa2dld29KQ1FrSmRtRnlJR014TWlBOUlHTnZaR1Z6VzJKMVpqVXVZMmhoY2tOdlpHVkJkQ2hwTVNzcktWMDdDZ2tKQ1FsMllYSWdZekl4SUQwZ1kyOWtaWE5iWW5WbU5TNWphR0Z5UTI5a1pVRjBLR2t4S3lzcFhUc0tDUWtKQ1dKNWRHVnpMbUpiWW5CdmN5c3JYU0E5SUdNeE1pQThQQ0F5SUh3Z1l6SXhJRDQrSURRN0Nna0pDUWxwWmloeVpYTjBJRDA5SURNcElIc0tDUWtKQ1FsMllYSWdZek14SUQwZ1kyOWtaWE5iWW5WbU5TNWphR0Z5UTI5a1pVRjBLR2t4S3lzcFhUc0tDUWtKQ1FsaWVYUmxjeTVpVzJKd2IzTXJLMTBnUFNCak1qRWdQRHdnTkNCOElHTXpNU0ErUGlBeU93b0pDUWtKZlFvSkNRbDlDZ2tKQ1hSb2FYTXVjRzl6SUNzOUlHeGxianNLQ1FrSmRHaHBjeTVqWVdOb1pTNXdkWE5vS0dKNWRHVnpLVHNLQ1FrSmNtVjBkWEp1SUdKNWRHVnpPd29KQ1dOaGMyVWdNVEUyT2dvSkNRbHlaWFIxY200Z2RISjFaVHNLQ1FsallYTmxJREV4T0RvS0NRa0pkbUZ5SUdRN0Nna0pDV2xtS0hSb2FYTXVZblZtTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNcElENDlJRFE0SUNZbUlIUm9hWE11WW5WbUxtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTXBJRHc5SURVM0lDWW1JSFJvYVhNdVluVm1MbU5vWVhKRGIyUmxRWFFvZEdocGN5NXdiM01nS3lBeEtTQStQU0EwT0NBbUppQjBhR2x6TG1KMVppNWphR0Z5UTI5a1pVRjBLSFJvYVhNdWNHOXpJQ3NnTVNrZ1BEMGdOVGNnSmlZZ2RHaHBjeTVpZFdZdVkyaGhja052WkdWQmRDaDBhR2x6TG5CdmN5QXJJRElwSUQ0OUlEUTRJQ1ltSUhSb2FYTXVZblZtTG1Ob1lYSkRiMlJsUVhRb2RHaHBjeTV3YjNNZ0t5QXlLU0E4UFNBMU55QW1KaUIwYUdsekxtSjFaaTVqYUdGeVEyOWtaVUYwS0hSb2FYTXVjRzl6SUNzZ015a2dQajBnTkRnZ0ppWWdkR2hwY3k1aWRXWXVZMmhoY2tOdlpHVkJkQ2gwYUdsekxuQnZjeUFySURNcElEdzlJRFUzSUNZbUlIUm9hWE11WW5WbUxtTm9ZWEpEYjJSbFFYUW9kR2hwY3k1d2IzTWdLeUEwS1NBOVBTQTBOU2tnZXdvSkNRa0paQ0E5SUVoNFQzWmxjbkpwWkdWekxuTjBja1JoZEdVb1NIaFBkbVZ5Y21sa1pYTXVjM1ZpYzNSeUtIUm9hWE11WW5WbUxIUm9hWE11Y0c5ekxERTVLU2s3Q2drSkNRbDBhR2x6TG5CdmN5QXJQU0F4T1RzS0NRa0pmU0JsYkhObElIc0tDUWtKQ1dRZ1BTQnVaWGNnUkdGMFpTaDBhR2x6TG5KbFlXUkdiRzloZENncEtUc0tDUWtKZlFvSkNRbDBhR2x6TG1OaFkyaGxMbkIxYzJnb1pDazdDZ2tKQ1hKbGRIVnliaUJrT3dvSkNXTmhjMlVnTVRFNU9nb0pDUWwyWVhJZ2JtRnRaVFVnUFNCMGFHbHpMblZ1YzJWeWFXRnNhWHBsS0NrN0Nna0pDWFpoY2lCbFpHVmpiREVnUFNCMGFHbHpMbkpsYzI5c2RtVnlMbkpsYzI5c2RtVkZiblZ0S0c1aGJXVTFLVHNLQ1FrSmFXWW9aV1JsWTJ3eElEMDlJRzUxYkd3cElIc0tDUWtKQ1hSb2NtOTNJRzVsZHlCcWMxOWZKRUp2YjNSZlNHRjRaVVZ5Y205eUtDSkZiblZ0SUc1dmRDQm1iM1Z1WkNBaUlDc2dibUZ0WlRVcE93b0pDUWw5Q2drSkNYWmhjaUJsTWlBOUlIUm9hWE11ZFc1elpYSnBZV3hwZW1WRmJuVnRLR1ZrWldOc01TeDBhR2x6TG5WdWMyVnlhV0ZzYVhwbEtDa3BPd29KQ1FsMGFHbHpMbU5oWTJobExuQjFjMmdvWlRJcE93b0pDUWx5WlhSMWNtNGdaVEk3Q2drSlkyRnpaU0F4TWpBNkNna0pDWFJvY205M0lHcHpYMThrUW05dmRGOUlZWGhsUlhKeWIzSXVkM0poY0NoMGFHbHpMblZ1YzJWeWFXRnNhWHBsS0NrcE93b0pDV05oYzJVZ01USXhPZ29KQ1FsMllYSWdiR1Z1TVNBOUlIUm9hWE11Y21WaFpFUnBaMmwwY3lncE93b0pDUWxwWmloMGFHbHpMbUoxWmk1amFHRnlRMjlrWlVGMEtIUm9hWE11Y0c5ekt5c3BJQ0U5SURVNElIeDhJSFJvYVhNdWJHVnVaM1JvSUMwZ2RHaHBjeTV3YjNNZ1BDQnNaVzR4S1NCN0Nna0pDUWwwYUhKdmR5QnVaWGNnYW5OZlh5UkNiMjkwWDBoaGVHVkZjbkp2Y2lnaVNXNTJZV3hwWkNCemRISnBibWNnYkdWdVozUm9JaWs3Q2drSkNYMEtDUWtKZG1GeUlITXlJRDBnU0hoUGRtVnljbWxrWlhNdWMzVmljM1J5S0hSb2FYTXVZblZtTEhSb2FYTXVjRzl6TEd4bGJqRXBPd29KQ1FsMGFHbHpMbkJ2Y3lBclBTQnNaVzR4T3dvSkNRbHpNaUE5SUdSbFkyOWtaVlZTU1VOdmJYQnZibVZ1ZENoek1pNXpjR3hwZENnaUt5SXBMbXB2YVc0b0lpQWlLU2s3Q2drSkNYUm9hWE11YzJOaFkyaGxMbkIxYzJnb2N6SXBPd29KQ1FseVpYUjFjbTRnY3pJN0Nna0pZMkZ6WlNBeE1qSTZDZ2tKQ1hKbGRIVnliaUF3T3dvSkNXUmxabUYxYkhRNkNna0pmUW9KQ1hSb2FYTXVjRzl6TFMwN0Nna0pkR2h5YjNjZ2JtVjNJR3B6WDE4a1FtOXZkRjlJWVhobFJYSnliM0lvSWtsdWRtRnNhV1FnWTJoaGNpQWlJQ3NnZEdocGN5NWlkV1l1WTJoaGNrRjBLSFJvYVhNdWNHOXpLU0FySUNJZ1lYUWdjRzl6YVhScGIyNGdJaUFySUhSb2FYTXVjRzl6S1RzS0NYMEtmVHNLZG1GeUlHaGhlR1ZmYVc5ZlFubDBaWE1nUFNCbWRXNWpkR2x2Ymloa1lYUmhLU0I3Q2dsMGFHbHpMbXhsYm1kMGFDQTlJR1JoZEdFdVlubDBaVXhsYm1kMGFEc0tDWFJvYVhNdVlpQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHUmhkR0VwT3dvSmRHaHBjeTVpTG1KMVptWmxjbFpoYkhWbElEMGdaR0YwWVRzS0NXUmhkR0V1YUhoQ2VYUmxjeUE5SUhSb2FYTTdDZ2xrWVhSaExtSjVkR1Z6SUQwZ2RHaHBjeTVpT3dwOU93b2thSGhEYkdGemMyVnpXeUpvWVhobExtbHZMa0o1ZEdWeklsMGdQU0JvWVhobFgybHZYMEo1ZEdWek93cG9ZWGhsWDJsdlgwSjVkR1Z6TGw5ZmJtRnRaVjlmSUQwZ2RISjFaVHNLYUdGNFpWOXBiMTlDZVhSbGN5NXZabE4wY21sdVp5QTlJR1oxYm1OMGFXOXVLSE1zWlc1amIyUnBibWNwSUhzS0NXbG1LR1Z1WTI5a2FXNW5JRDA5SUdoaGVHVmZhVzlmUlc1amIyUnBibWN1VW1GM1RtRjBhWFpsS1NCN0Nna0pkbUZ5SUdKMVppQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtITXViR1Z1WjNSb0lEdzhJREVwT3dvSkNYWmhjaUJmWnlBOUlEQTdDZ2tKZG1GeUlGOW5NU0E5SUhNdWJHVnVaM1JvT3dvSkNYZG9hV3hsS0Y5bklEd2dYMmN4S1NCN0Nna0pDWFpoY2lCcElEMGdYMmNyS3pzS0NRa0pkbUZ5SUdNZ1BTQnpMbU5vWVhKRGIyUmxRWFFvYVNrN0Nna0pDV0oxWmx0cElEdzhJREZkSUQwZ1l5QW1JREkxTlRzS0NRa0pZblZtVzJrZ1BEd2dNU0I4SURGZElEMGdZeUErUGlBNE93b0pDWDBLQ1FseVpYUjFjbTRnYm1WM0lHaGhlR1ZmYVc5ZlFubDBaWE1vWW5WbUxtSjFabVpsY2lrN0NnbDlDZ2wyWVhJZ1lTQTlJRnRkT3dvSmRtRnlJR2t4SUQwZ01Ec0tDWGRvYVd4bEtHa3hJRHdnY3k1c1pXNW5kR2dwSUhzS0NRbDJZWElnWXpFZ1BTQnpMbU5vWVhKRGIyUmxRWFFvYVRFckt5azdDZ2tKYVdZb05UVXlPVFlnUEQwZ1l6RWdKaVlnWXpFZ1BEMGdOVFl6TVRrcElIc0tDUWtKWXpFZ1BTQmpNU0F0SURVMU1qTXlJRHc4SURFd0lId2djeTVqYUdGeVEyOWtaVUYwS0dreEt5c3BJQ1lnTVRBeU16c0tDUWw5Q2drSmFXWW9ZekVnUEQwZ01USTNLU0I3Q2drSkNXRXVjSFZ6YUNoak1TazdDZ2tKZlNCbGJITmxJR2xtS0dNeElEdzlJREl3TkRjcElIc0tDUWtKWVM1d2RYTm9LREU1TWlCOElHTXhJRDQrSURZcE93b0pDUWxoTG5CMWMyZ29NVEk0SUh3Z1l6RWdKaUEyTXlrN0Nna0pmU0JsYkhObElHbG1LR014SUR3OUlEWTFOVE0xS1NCN0Nna0pDV0V1Y0hWemFDZ3lNalFnZkNCak1TQStQaUF4TWlrN0Nna0pDV0V1Y0hWemFDZ3hNamdnZkNCak1TQStQaUEySUNZZ05qTXBPd29KQ1FsaExuQjFjMmdvTVRJNElId2dZekVnSmlBMk15azdDZ2tKZlNCbGJITmxJSHNLQ1FrSllTNXdkWE5vS0RJME1DQjhJR014SUQ0K0lERTRLVHNLQ1FrSllTNXdkWE5vS0RFeU9DQjhJR014SUQ0K0lERXlJQ1lnTmpNcE93b0pDUWxoTG5CMWMyZ29NVEk0SUh3Z1l6RWdQajRnTmlBbUlEWXpLVHNLQ1FrSllTNXdkWE5vS0RFeU9DQjhJR014SUNZZ05qTXBPd29KQ1gwS0NYMEtDWEpsZEhWeWJpQnVaWGNnYUdGNFpWOXBiMTlDZVhSbGN5aHVaWGNnVldsdWREaEJjbkpoZVNoaEtTNWlkV1ptWlhJcE93cDlPd3BvWVhobFgybHZYMEo1ZEdWekxuQnliM1J2ZEhsd1pTQTlJSHNLQ1dkbGRGTjBjbWx1WnpvZ1puVnVZM1JwYjI0b2NHOXpMR3hsYml4bGJtTnZaR2x1WnlrZ2V3b0pDV2xtS0hCdmN5QThJREFnZkh3Z2JHVnVJRHdnTUNCOGZDQndiM01nS3lCc1pXNGdQaUIwYUdsekxteGxibWQwYUNrZ2V3b0pDUWwwYUhKdmR5QnVaWGNnYW5OZlh5UkNiMjkwWDBoaGVHVkZjbkp2Y2lob1lYaGxYMmx2WDBWeWNtOXlMazkxZEhOcFpHVkNiM1Z1WkhNcE93b0pDWDBLQ1FscFppaGxibU52WkdsdVp5QTlQU0J1ZFd4c0tTQjdDZ2tKQ1dWdVkyOWthVzVuSUQwZ2FHRjRaVjlwYjE5RmJtTnZaR2x1Wnk1VlZFWTRPd29KQ1gwS0NRbDJZWElnY3lBOUlDSWlPd29KQ1haaGNpQmlJRDBnZEdocGN5NWlPd29KQ1haaGNpQnBJRDBnY0c5ek93b0pDWFpoY2lCdFlYZ2dQU0J3YjNNZ0t5QnNaVzQ3Q2drSmMzZHBkR05vS0dWdVkyOWthVzVuTGw5b2VGOXBibVJsZUNrZ2V3b0pDV05oYzJVZ01Eb0tDUWtKZG1GeUlHUmxZblZuSUQwZ2NHOXpJRDRnTURzS0NRa0pkMmhwYkdVb2FTQThJRzFoZUNrZ2V3b0pDUWtKZG1GeUlHTWdQU0JpVzJrcksxMDdDZ2tKQ1FscFppaGpJRHdnTVRJNEtTQjdDZ2tKQ1FrSmFXWW9ZeUE5UFNBd0tTQjdDZ2tKQ1FrSkNXSnlaV0ZyT3dvSkNRa0pDWDBLQ1FrSkNRbHpJQ3M5SUZOMGNtbHVaeTVtY205dFEyOWtaVkJ2YVc1MEtHTXBPd29KQ1FrSmZTQmxiSE5sSUdsbUtHTWdQQ0F5TWpRcElIc0tDUWtKQ1FsMllYSWdZMjlrWlNBOUlDaGpJQ1lnTmpNcElEdzhJRFlnZkNCaVcya3JLMTBnSmlBeE1qYzdDZ2tKQ1FrSmN5QXJQU0JUZEhKcGJtY3Vabkp2YlVOdlpHVlFiMmx1ZENoamIyUmxLVHNLQ1FrSkNYMGdaV3h6WlNCcFppaGpJRHdnTWpRd0tTQjdDZ2tKQ1FrSmRtRnlJR015SUQwZ1lsdHBLeXRkT3dvSkNRa0pDWFpoY2lCamIyUmxNU0E5SUNoaklDWWdNekVwSUR3OElERXlJSHdnS0dNeUlDWWdNVEkzS1NBOFBDQTJJSHdnWWx0cEt5dGRJQ1lnTVRJM093b0pDUWtKQ1hNZ0t6MGdVM1J5YVc1bkxtWnliMjFEYjJSbFVHOXBiblFvWTI5a1pURXBPd29KQ1FrSmZTQmxiSE5sSUhzS0NRa0pDUWwyWVhJZ1l6SXhJRDBnWWx0cEt5dGRPd29KQ1FrSkNYWmhjaUJqTXlBOUlHSmJhU3NyWFRzS0NRa0pDUWwyWVhJZ2RTQTlJQ2hqSUNZZ01UVXBJRHc4SURFNElId2dLR015TVNBbUlERXlOeWtnUER3Z01USWdmQ0FvWXpNZ0ppQXhNamNwSUR3OElEWWdmQ0JpVzJrcksxMGdKaUF4TWpjN0Nna0pDUWtKY3lBclBTQlRkSEpwYm1jdVpuSnZiVU52WkdWUWIybHVkQ2gxS1RzS0NRa0pDWDBLQ1FrSmZRb0pDUWxpY21WaGF6c0tDUWxqWVhObElERTZDZ2tKQ1hkb2FXeGxLR2tnUENCdFlYZ3BJSHNLQ1FrSkNYWmhjaUJqTVNBOUlHSmJhU3NyWFNCOElHSmJhU3NyWFNBOFBDQTRPd29KQ1FrSmN5QXJQU0JUZEhKcGJtY3Vabkp2YlVOdlpHVlFiMmx1ZENoak1TazdDZ2tKQ1gwS0NRa0pZbkpsWVdzN0Nna0pmUW9KQ1hKbGRIVnliaUJ6T3dvSmZRb0pMSFJ2VTNSeWFXNW5PaUJtZFc1amRHbHZiaWdwSUhzS0NRbHlaWFIxY200Z2RHaHBjeTVuWlhSVGRISnBibWNvTUN4MGFHbHpMbXhsYm1kMGFDazdDZ2w5Q24wN0NuWmhjaUJvWVhobFgybHZYMFZ1WTI5a2FXNW5JRDBnSkdoNFJXNTFiWE5iSW1oaGVHVXVhVzh1Ulc1amIyUnBibWNpWFNBOUlIc2dYMTlsYm1GdFpWOWZJRG9nZEhKMVpTd2dYMTlqYjI1emRISjFZM1J6WDE4Z09pQmJJbFZVUmpnaUxDSlNZWGRPWVhScGRtVWlYUW9KTEZWVVJqZzZJSHRmYUhoZmFXNWtaWGc2TUN4ZlgyVnVkVzFmWHpvaWFHRjRaUzVwYnk1RmJtTnZaR2x1WnlJc2RHOVRkSEpwYm1jNkpHVnpkSEo5Q2drc1VtRjNUbUYwYVhabE9pQjdYMmg0WDJsdVpHVjRPakVzWDE5bGJuVnRYMTg2SW1oaGVHVXVhVzh1Ulc1amIyUnBibWNpTEhSdlUzUnlhVzVuT2lSbGMzUnlmUXA5T3dwMllYSWdhR0Y0WlY5amNubHdkRzlmUW1GelpUWTBJRDBnWm5WdVkzUnBiMjRvS1NCN0lIMDdDaVJvZUVOc1lYTnpaWE5iSW1oaGVHVXVZM0o1Y0hSdkxrSmhjMlUyTkNKZElEMGdhR0Y0WlY5amNubHdkRzlmUW1GelpUWTBPd3BvWVhobFgyTnllWEIwYjE5Q1lYTmxOalF1WDE5dVlXMWxYMThnUFNCMGNuVmxPd3BvWVhobFgyTnllWEIwYjE5Q1lYTmxOalF1WkdWamIyUmxJRDBnWm5WdVkzUnBiMjRvYzNSeUxHTnZiWEJzWlcxbGJuUXBJSHNLQ1dsbUtHTnZiWEJzWlcxbGJuUWdQVDBnYm5Wc2JDa2dld29KQ1dOdmJYQnNaVzFsYm5RZ1BTQjBjblZsT3dvSmZRb0phV1lvWTI5dGNHeGxiV1Z1ZENrZ2V3b0pDWGRvYVd4bEtFaDRUM1psY25KcFpHVnpMbU5qWVNoemRISXNjM1J5TG14bGJtZDBhQ0F0SURFcElEMDlJRFl4S1NCemRISWdQU0JJZUU5MlpYSnlhV1JsY3k1emRXSnpkSElvYzNSeUxEQXNMVEVwT3dvSmZRb0pjbVYwZFhKdUlHNWxkeUJvWVhobFgyTnllWEIwYjE5Q1lYTmxRMjlrWlNob1lYaGxYMk55ZVhCMGIxOUNZWE5sTmpRdVFsbFVSVk1wTG1SbFkyOWtaVUo1ZEdWektHaGhlR1ZmYVc5ZlFubDBaWE11YjJaVGRISnBibWNvYzNSeUtTazdDbjA3Q25aaGNpQm9ZWGhsWDJOeWVYQjBiMTlDWVhObFEyOWtaU0E5SUdaMWJtTjBhVzl1S0dKaGMyVXBJSHNLQ1haaGNpQnNaVzRnUFNCaVlYTmxMbXhsYm1kMGFEc0tDWFpoY2lCdVltbDBjeUE5SURFN0NnbDNhR2xzWlNoc1pXNGdQaUF4SUR3OElHNWlhWFJ6S1NBcksyNWlhWFJ6T3dvSmFXWW9ibUpwZEhNZ1BpQTRJSHg4SUd4bGJpQWhQU0F4SUR3OElHNWlhWFJ6S1NCN0Nna0pkR2h5YjNjZ2JtVjNJR3B6WDE4a1FtOXZkRjlJWVhobFJYSnliM0lvSWtKaGMyVkRiMlJsSURvZ1ltRnpaU0JzWlc1bmRHZ2diWFZ6ZENCaVpTQmhJSEJ2ZDJWeUlHOW1JSFIzYnk0aUtUc0tDWDBLQ1hSb2FYTXVZbUZ6WlNBOUlHSmhjMlU3Q2dsMGFHbHpMbTVpYVhSeklEMGdibUpwZEhNN0NuMDdDaVJvZUVOc1lYTnpaWE5iSW1oaGVHVXVZM0o1Y0hSdkxrSmhjMlZEYjJSbElsMGdQU0JvWVhobFgyTnllWEIwYjE5Q1lYTmxRMjlrWlRzS2FHRjRaVjlqY25sd2RHOWZRbUZ6WlVOdlpHVXVYMTl1WVcxbFgxOGdQU0IwY25WbE93cG9ZWGhsWDJOeWVYQjBiMTlDWVhObFEyOWtaUzV3Y205MGIzUjVjR1VnUFNCN0NnbHBibWwwVkdGaWJHVTZJR1oxYm1OMGFXOXVLQ2tnZXdvSkNYWmhjaUIwWW13Z1BTQmJYVHNLQ1FsMllYSWdYMmNnUFNBd093b0pDWGRvYVd4bEtGOW5JRHdnTWpVMktTQjdDZ2tKQ1haaGNpQnBJRDBnWDJjckt6c0tDUWtKZEdKc1cybGRJRDBnTFRFN0Nna0pmUW9KQ1haaGNpQmZaekVnUFNBd093b0pDWFpoY2lCZlp6SWdQU0IwYUdsekxtSmhjMlV1YkdWdVozUm9Pd29KQ1hkb2FXeGxLRjluTVNBOElGOW5NaWtnZXdvSkNRbDJZWElnYVRFZ1BTQmZaekVyS3pzS0NRa0pkR0pzVzNSb2FYTXVZbUZ6WlM1aVcya3hYVjBnUFNCcE1Uc0tDUWw5Q2drSmRHaHBjeTUwWW13Z1BTQjBZbXc3Q2dsOUNna3NaR1ZqYjJSbFFubDBaWE02SUdaMWJtTjBhVzl1S0dJcElIc0tDUWwyWVhJZ2JtSnBkSE1nUFNCMGFHbHpMbTVpYVhSek93b0pDWFpoY2lCaVlYTmxJRDBnZEdocGN5NWlZWE5sT3dvSkNXbG1LSFJvYVhNdWRHSnNJRDA5SUc1MWJHd3BJSHNLQ1FrSmRHaHBjeTVwYm1sMFZHRmliR1VvS1RzS0NRbDlDZ2tKZG1GeUlIUmliQ0E5SUhSb2FYTXVkR0pzT3dvSkNYWmhjaUJ6YVhwbElEMGdZaTVzWlc1bmRHZ2dLaUJ1WW1sMGN5QStQaUF6T3dvSkNYWmhjaUJ2ZFhRZ1BTQnVaWGNnYUdGNFpWOXBiMTlDZVhSbGN5aHVaWGNnUVhKeVlYbENkV1ptWlhJb2MybDZaU2twT3dvSkNYWmhjaUJpZFdZZ1BTQXdPd29KQ1haaGNpQmpkWEppYVhSeklEMGdNRHNLQ1FsMllYSWdjR2x1SUQwZ01Ec0tDUWwyWVhJZ2NHOTFkQ0E5SURBN0Nna0pkMmhwYkdVb2NHOTFkQ0E4SUhOcGVtVXBJSHNLQ1FrSmQyaHBiR1VvWTNWeVltbDBjeUE4SURncElIc0tDUWtKQ1dOMWNtSnBkSE1nS3owZ2JtSnBkSE03Q2drSkNRbGlkV1lnUER3OUlHNWlhWFJ6T3dvSkNRa0pkbUZ5SUdrZ1BTQjBZbXhiWWk1aVczQnBiaXNyWFYwN0Nna0pDUWxwWmlocElEMDlJQzB4S1NCN0Nna0pDUWtKZEdoeWIzY2dibVYzSUdwelgxOGtRbTl2ZEY5SVlYaGxSWEp5YjNJb0lrSmhjMlZEYjJSbElEb2dhVzUyWVd4cFpDQmxibU52WkdWa0lHTm9ZWElpS1RzS0NRa0pDWDBLQ1FrSkNXSjFaaUI4UFNCcE93b0pDUWw5Q2drSkNXTjFjbUpwZEhNZ0xUMGdPRHNLQ1FrSmIzVjBMbUpiY0c5MWRDc3JYU0E5SUdKMVppQStQaUJqZFhKaWFYUnpJQ1lnTWpVMU93b0pDWDBLQ1FseVpYUjFjbTRnYjNWME93b0pmUXA5T3dwMllYSWdhR0Y0WlY5a2MxOUpiblJOWVhBZ1BTQm1kVzVqZEdsdmJpZ3BJSHNLQ1hSb2FYTXVhQ0E5SUhzZ2ZUc0tmVHNLSkdoNFEyeGhjM05sYzFzaWFHRjRaUzVrY3k1SmJuUk5ZWEFpWFNBOUlHaGhlR1ZmWkhOZlNXNTBUV0Z3T3dwb1lYaGxYMlJ6WDBsdWRFMWhjQzVmWDI1aGJXVmZYeUE5SUhSeWRXVTdDblpoY2lCb1lYaGxYMlJ6WDB4cGMzUWdQU0JtZFc1amRHbHZiaWdwSUhzS0NYUm9hWE11YkdWdVozUm9JRDBnTURzS2ZUc0tKR2g0UTJ4aGMzTmxjMXNpYUdGNFpTNWtjeTVNYVhOMElsMGdQU0JvWVhobFgyUnpYMHhwYzNRN0NtaGhlR1ZmWkhOZlRHbHpkQzVmWDI1aGJXVmZYeUE5SUhSeWRXVTdDbWhoZUdWZlpITmZUR2x6ZEM1d2NtOTBiM1I1Y0dVZ1BTQjdDZ2xoWkdRNklHWjFibU4wYVc5dUtHbDBaVzBwSUhzS0NRbDJZWElnZUNBOUlHNWxkeUJvWVhobFgyUnpYMThrVEdsemRGOU1hWE4wVG05a1pTaHBkR1Z0TEc1MWJHd3BPd29KQ1dsbUtIUm9hWE11YUNBOVBTQnVkV3hzS1NCN0Nna0pDWFJvYVhNdWFDQTlJSGc3Q2drSmZTQmxiSE5sSUhzS0NRa0pkR2hwY3k1eExtNWxlSFFnUFNCNE93b0pDWDBLQ1FsMGFHbHpMbkVnUFNCNE93b0pDWFJvYVhNdWJHVnVaM1JvS3lzN0NnbDlDbjA3Q25aaGNpQm9ZWGhsWDJSelgxOGtUR2x6ZEY5TWFYTjBUbTlrWlNBOUlHWjFibU4wYVc5dUtHbDBaVzBzYm1WNGRDa2dld29KZEdocGN5NXBkR1Z0SUQwZ2FYUmxiVHNLQ1hSb2FYTXVibVY0ZENBOUlHNWxlSFE3Q24wN0NpUm9lRU5zWVhOelpYTmJJbWhoZUdVdVpITXVYMHhwYzNRdVRHbHpkRTV2WkdVaVhTQTlJR2hoZUdWZlpITmZYeVJNYVhOMFgweHBjM1JPYjJSbE93cG9ZWGhsWDJSelgxOGtUR2x6ZEY5TWFYTjBUbTlrWlM1ZlgyNWhiV1ZmWHlBOUlIUnlkV1U3Q25aaGNpQm9ZWGhsWDJSelgwOWlhbVZqZEUxaGNDQTlJR1oxYm1OMGFXOXVLQ2tnZXdvSmRHaHBjeTVvSUQwZ2V5QmZYMnRsZVhOZlh5QTZJSHNnZlgwN0NuMDdDaVJvZUVOc1lYTnpaWE5iSW1oaGVHVXVaSE11VDJKcVpXTjBUV0Z3SWwwZ1BTQm9ZWGhsWDJSelgwOWlhbVZqZEUxaGNEc0thR0Y0WlY5a2MxOVBZbXBsWTNSTllYQXVYMTl1WVcxbFgxOGdQU0IwY25WbE93cG9ZWGhsWDJSelgwOWlhbVZqZEUxaGNDNXdjbTkwYjNSNWNHVWdQU0I3Q2dselpYUTZJR1oxYm1OMGFXOXVLR3RsZVN4MllXeDFaU2tnZXdvSkNYWmhjaUJwWkNBOUlHdGxlUzVmWDJsa1gxODdDZ2tKYVdZb2FXUWdQVDBnYm5Wc2JDa2dld29KQ1FscFpDQTlJQ2hyWlhrdVgxOXBaRjlmSUQwZ0pHZHNiMkpoYkM0a2FHRjRaVlZKUkNzcktUc0tDUWw5Q2drSmRHaHBjeTVvVzJsa1hTQTlJSFpoYkhWbE93b0pDWFJvYVhNdWFDNWZYMnRsZVhOZlgxdHBaRjBnUFNCclpYazdDZ2w5Q24wN0NuWmhjaUJvWVhobFgyUnpYMU4wY21sdVowMWhjQ0E5SUdaMWJtTjBhVzl1S0NrZ2V3b0pkR2hwY3k1b0lEMGdleUI5T3dwOU93b2thSGhEYkdGemMyVnpXeUpvWVhobExtUnpMbE4wY21sdVowMWhjQ0pkSUQwZ2FHRjRaVjlrYzE5VGRISnBibWROWVhBN0NtaGhlR1ZmWkhOZlUzUnlhVzVuVFdGd0xsOWZibUZ0WlY5ZklEMGdkSEoxWlRzS2FHRjRaVjlrYzE5VGRISnBibWROWVhBdWNISnZkRzkwZVhCbElEMGdld29KYzJWMFVtVnpaWEoyWldRNklHWjFibU4wYVc5dUtHdGxlU3gyWVd4MVpTa2dld29KQ1dsbUtIUm9hWE11Y21nZ1BUMGdiblZzYkNrZ2V3b0pDUWwwYUdsekxuSm9JRDBnZXlCOU93b0pDWDBLQ1FsMGFHbHpMbkpvV3lJa0lpQXJJR3RsZVYwZ1BTQjJZV3gxWlRzS0NYMEtDU3huWlhSU1pYTmxjblpsWkRvZ1puVnVZM1JwYjI0b2EyVjVLU0I3Q2drSmFXWW9kR2hwY3k1eWFDQTlQU0J1ZFd4c0tTQjdDZ2tKQ1hKbGRIVnliaUJ1ZFd4c093b0pDWDBnWld4elpTQjdDZ2tKQ1hKbGRIVnliaUIwYUdsekxuSm9XeUlrSWlBcklHdGxlVjA3Q2drSmZRb0pmUW9KTEdWNGFYTjBjMUpsYzJWeWRtVmtPaUJtZFc1amRHbHZiaWhyWlhrcElIc0tDUWxwWmloMGFHbHpMbkpvSUQwOUlHNTFiR3dwSUhzS0NRa0pjbVYwZFhKdUlHWmhiSE5sT3dvSkNYMEtDUWx5WlhSMWNtNGdkR2hwY3k1eWFDNW9ZWE5QZDI1UWNtOXdaWEowZVNnaUpDSWdLeUJyWlhrcE93b0pmUW9KTEd0bGVYTTZJR1oxYm1OMGFXOXVLQ2tnZXdvSkNYSmxkSFZ5YmlCSWVFOTJaWEp5YVdSbGN5NXBkR1Z5S0hSb2FYTXVZWEp5WVhsTFpYbHpLQ2twT3dvSmZRb0pMR0Z5Y21GNVMyVjVjem9nWm5WdVkzUnBiMjRvS1NCN0Nna0pkbUZ5SUc5MWRDQTlJRnRkT3dvSkNXWnZjaWdnZG1GeUlHdGxlU0JwYmlCMGFHbHpMbWdnS1NCN0Nna0phV1lvZEdocGN5NW9MbWhoYzA5M2JsQnliM0JsY25SNUtHdGxlU2twSUhzS0NRa0piM1YwTG5CMWMyZ29hMlY1S1RzS0NRbDlDZ2tKZlFvSkNXbG1LSFJvYVhNdWNtZ2dJVDBnYm5Wc2JDa2dld29KQ1FsbWIzSW9JSFpoY2lCclpYa2dhVzRnZEdocGN5NXlhQ0FwSUhzS0NRa0phV1lvYTJWNUxtTm9ZWEpEYjJSbFFYUW9NQ2tnUFQwZ016WXBJSHNLQ1FrSkNXOTFkQzV3ZFhOb0tHdGxlUzV6ZFdKemRISW9NU2twT3dvSkNRbDlDZ2tKQ1gwS0NRbDlDZ2tKY21WMGRYSnVJRzkxZERzS0NYMEtmVHNLZG1GeUlHaGhlR1ZmYVc5ZlJYSnliM0lnUFNBa2FIaEZiblZ0YzFzaWFHRjRaUzVwYnk1RmNuSnZjaUpkSUQwZ2V5QmZYMlZ1WVcxbFgxOGdPaUIwY25WbExDQmZYMk52Ym5OMGNuVmpkSE5mWHlBNklGc2lRbXh2WTJ0bFpDSXNJazkyWlhKbWJHOTNJaXdpVDNWMGMybGtaVUp2ZFc1a2N5SXNJa04xYzNSdmJTSmRDZ2tzUW14dlkydGxaRG9nZTE5b2VGOXBibVJsZURvd0xGOWZaVzUxYlY5Zk9pSm9ZWGhsTG1sdkxrVnljbTl5SWl4MGIxTjBjbWx1Wnpva1pYTjBjbjBLQ1N4UGRtVnlabXh2ZHpvZ2UxOW9lRjlwYm1SbGVEb3hMRjlmWlc1MWJWOWZPaUpvWVhobExtbHZMa1Z5Y205eUlpeDBiMU4wY21sdVp6b2taWE4wY24wS0NTeFBkWFJ6YVdSbFFtOTFibVJ6T2lCN1gyaDRYMmx1WkdWNE9qSXNYMTlsYm5WdFgxODZJbWhoZUdVdWFXOHVSWEp5YjNJaUxIUnZVM1J5YVc1bk9pUmxjM1J5ZlFvSkxFTjFjM1J2YlRvZ0tDUmZQV1oxYm1OMGFXOXVLR1VwSUhzZ2NtVjBkWEp1SUh0ZmFIaGZhVzVrWlhnNk15eGxPbVVzWDE5bGJuVnRYMTg2SW1oaGVHVXVhVzh1UlhKeWIzSWlMSFJ2VTNSeWFXNW5PaVJsYzNSeWZUc2dmU3drWHk1ZlgzQmhjbUZ0YzE5ZklEMGdXeUpsSWwwc0pGOHBDbjA3Q25aaGNpQnFjMTlmSkVKdmIzUmZTR0Y0WlVWeWNtOXlJRDBnWm5WdVkzUnBiMjRvZG1Gc0tTQjdDZ2xGY25KdmNpNWpZV3hzS0hSb2FYTXBPd29KZEdocGN5NTJZV3dnUFNCMllXdzdDZ2xwWmloRmNuSnZjaTVqWVhCMGRYSmxVM1JoWTJ0VWNtRmpaU2tnZXdvSkNVVnljbTl5TG1OaGNIUjFjbVZUZEdGamExUnlZV05sS0hSb2FYTXNhbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaWs3Q2dsOUNuMDdDaVJvZUVOc1lYTnpaWE5iSW1wekxsOUNiMjkwTGtoaGVHVkZjbkp2Y2lKZElEMGdhbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjanNLYW5OZlh5UkNiMjkwWDBoaGVHVkZjbkp2Y2k1ZlgyNWhiV1ZmWHlBOUlIUnlkV1U3Q21welgxOGtRbTl2ZEY5SVlYaGxSWEp5YjNJdWQzSmhjQ0E5SUdaMWJtTjBhVzl1S0haaGJDa2dld29KYVdZb0tDaDJZV3dwSUdsdWMzUmhibU5sYjJZZ1JYSnliM0lwS1NCN0Nna0pjbVYwZFhKdUlIWmhiRHNLQ1gwZ1pXeHpaU0I3Q2drSmNtVjBkWEp1SUc1bGR5QnFjMTlmSkVKdmIzUmZTR0Y0WlVWeWNtOXlLSFpoYkNrN0NnbDlDbjA3Q21welgxOGtRbTl2ZEY5SVlYaGxSWEp5YjNJdVgxOXpkWEJsY2w5ZklEMGdSWEp5YjNJN0NtcHpYMThrUW05dmRGOUlZWGhsUlhKeWIzSXVjSEp2ZEc5MGVYQmxJRDBnSkdWNGRHVnVaQ2hGY25KdmNpNXdjbTkwYjNSNWNHVXNld3A5S1RzS2RtRnlJR3B6WDBKdmIzUWdQU0JtZFc1amRHbHZiaWdwSUhzZ2ZUc0tKR2g0UTJ4aGMzTmxjMXNpYW5NdVFtOXZkQ0pkSUQwZ2FuTmZRbTl2ZERzS2FuTmZRbTl2ZEM1ZlgyNWhiV1ZmWHlBOUlIUnlkV1U3Q21welgwSnZiM1F1WDE5emRISnBibWRmY21WaklEMGdablZ1WTNScGIyNG9ieXh6S1NCN0NnbHBaaWh2SUQwOUlHNTFiR3dwSUhzS0NRbHlaWFIxY200Z0ltNTFiR3dpT3dvSmZRb0phV1lvY3k1c1pXNW5kR2dnUGowZ05Ta2dld29KQ1hKbGRIVnliaUFpUEM0dUxqNGlPd29KZlFvSmRtRnlJSFFnUFNCMGVYQmxiMllvYnlrN0NnbHBaaWgwSUQwOUlDSm1kVzVqZEdsdmJpSWdKaVlnS0c4dVgxOXVZVzFsWDE4Z2ZId2dieTVmWDJWdVlXMWxYMThwS1NCN0Nna0pkQ0E5SUNKdlltcGxZM1FpT3dvSmZRb0pjM2RwZEdOb0tIUXBJSHNLQ1dOaGMyVWdJbVoxYm1OMGFXOXVJam9LQ1FseVpYUjFjbTRnSWp4bWRXNWpkR2x2Ymo0aU93b0pZMkZ6WlNBaWIySnFaV04wSWpvS0NRbHBaaWh2TGw5ZlpXNTFiVjlmS1NCN0Nna0pDWFpoY2lCbElEMGdKR2g0Ulc1MWJYTmJieTVmWDJWdWRXMWZYMTA3Q2drSkNYWmhjaUJ1SUQwZ1pTNWZYMk52Ym5OMGNuVmpkSE5mWDF0dkxsOW9lRjlwYm1SbGVGMDdDZ2tKQ1haaGNpQmpiMjRnUFNCbFcyNWRPd29KQ1FscFppaGpiMjR1WDE5d1lYSmhiWE5mWHlrZ2V3b0pDUWtKY3lBOUlITWdLeUFpWEhRaU93b0pDUWtKY21WMGRYSnVJRzRnS3lBaUtDSWdLeUFvS0daMWJtTjBhVzl1S0NSMGFHbHpLU0I3Q2drSkNRa0pkbUZ5SUNSeU93b0pDUWtKQ1haaGNpQmZaeUE5SUZ0ZE93b0pDUWtKQ1hzS0NRa0pDUWtKZG1GeUlGOW5NU0E5SURBN0Nna0pDUWtKQ1haaGNpQmZaeklnUFNCamIyNHVYMTl3WVhKaGJYTmZYenNLQ1FrSkNRa0pkMmhwYkdVb2RISjFaU2tnZXdvSkNRa0pDUWtKYVdZb0lTaGZaekVnUENCZlp6SXViR1Z1WjNSb0tTa2dld29KQ1FrSkNRa0pDV0p5WldGck93b0pDUWtKQ1FrSmZRb0pDUWtKQ1FrSmRtRnlJSEFnUFNCZlp6SmJYMmN4WFRzS0NRa0pDUWtKQ1Y5bk1TQTlJRjluTVNBcklERTdDZ2tKQ1FrSkNRbGZaeTV3ZFhOb0tHcHpYMEp2YjNRdVgxOXpkSEpwYm1kZmNtVmpLRzliY0Ywc2N5a3BPd29KQ1FrSkNRbDlDZ2tKQ1FrSmZRb0pDUWtKQ1NSeUlEMGdYMmM3Q2drSkNRa0pjbVYwZFhKdUlDUnlPd29KQ1FrSmZTaDBhR2x6S1NrcExtcHZhVzRvSWl3aUtTQXJJQ0lwSWpzS0NRa0pmU0JsYkhObElIc0tDUWtKQ1hKbGRIVnliaUJ1T3dvSkNRbDlDZ2tKZlFvSkNXbG1LQ2dvYnlrZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVNrcElIc0tDUWtKZG1GeUlITjBjaUE5SUNKYklqc0tDUWtKY3lBclBTQWlYSFFpT3dvSkNRbDJZWElnWDJjeklEMGdNRHNLQ1FrSmRtRnlJRjluTVRFZ1BTQnZMbXhsYm1kMGFEc0tDUWtKZDJocGJHVW9YMmN6SUR3Z1gyY3hNU2tnZXdvSkNRa0pkbUZ5SUdrZ1BTQmZaek1yS3pzS0NRa0pDWE4wY2lBclBTQW9hU0ErSURBZ1B5QWlMQ0lnT2lBaUlpa2dLeUJxYzE5Q2IyOTBMbDlmYzNSeWFXNW5YM0psWXlodlcybGRMSE1wT3dvSkNRbDlDZ2tKQ1hOMGNpQXJQU0FpWFNJN0Nna0pDWEpsZEhWeWJpQnpkSEk3Q2drSmZRb0pDWFpoY2lCMGIzTjBjanNLQ1FsMGNua2dld29KQ1FsMGIzTjBjaUE5SUc4dWRHOVRkSEpwYm1jN0Nna0pmU0JqWVhSamFDZ2daVEVnS1NCN0Nna0pDWFpoY2lCbE1pQTlJQ2dvWlRFcElHbHVjM1JoYm1ObGIyWWdhbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaWtnUHlCbE1TNTJZV3dnT2lCbE1Uc0tDUWtKY21WMGRYSnVJQ0kvUHo4aU93b0pDWDBLQ1FscFppaDBiM04wY2lBaFBTQnVkV3hzSUNZbUlIUnZjM1J5SUNFOUlFOWlhbVZqZEM1MGIxTjBjbWx1WnlBbUppQjBlWEJsYjJZb2RHOXpkSElwSUQwOUlDSm1kVzVqZEdsdmJpSXBJSHNLQ1FrSmRtRnlJSE15SUQwZ2J5NTBiMU4wY21sdVp5Z3BPd29KQ1FscFppaHpNaUFoUFNBaVcyOWlhbVZqZENCUFltcGxZM1JkSWlrZ2V3b0pDUWtKY21WMGRYSnVJSE15T3dvSkNRbDlDZ2tKZlFvSkNYWmhjaUJ6ZEhJeElEMGdJbnRjYmlJN0Nna0pjeUFyUFNBaVhIUWlPd29KQ1haaGNpQm9ZWE53SUQwZ2J5NW9ZWE5QZDI1UWNtOXdaWEowZVNBaFBTQnVkV3hzT3dvSkNYWmhjaUJySUQwZ2JuVnNiRHNLQ1FsbWIzSW9JR3NnYVc0Z2J5QXBJSHNLQ1FscFppaG9ZWE53SUNZbUlDRnZMbWhoYzA5M2JsQnliM0JsY25SNUtHc3BLU0I3Q2drSkNXTnZiblJwYm5WbE93b0pDWDBLQ1FscFppaHJJRDA5SUNKd2NtOTBiM1I1Y0dVaUlIeDhJR3NnUFQwZ0lsOWZZMnhoYzNOZlh5SWdmSHdnYXlBOVBTQWlYMTl6ZFhCbGNsOWZJaUI4ZkNCcklEMDlJQ0pmWDJsdWRHVnlabUZqWlhOZlh5SWdmSHdnYXlBOVBTQWlYMTl3Y205d1pYSjBhV1Z6WDE4aUtTQjdDZ2tKQ1dOdmJuUnBiblZsT3dvSkNYMEtDUWxwWmloemRISXhMbXhsYm1kMGFDQWhQU0F5S1NCN0Nna0pDWE4wY2pFZ0t6MGdJaXdnWEc0aU93b0pDWDBLQ1FsemRISXhJQ3M5SUhNZ0t5QnJJQ3NnSWlBNklDSWdLeUJxYzE5Q2IyOTBMbDlmYzNSeWFXNW5YM0psWXlodlcydGRMSE1wT3dvSkNYMEtDUWx6SUQwZ2N5NXpkV0p6ZEhKcGJtY29NU2s3Q2drSmMzUnlNU0FyUFNBaVhHNGlJQ3NnY3lBcklDSjlJanNLQ1FseVpYUjFjbTRnYzNSeU1Uc0tDV05oYzJVZ0luTjBjbWx1WnlJNkNna0pjbVYwZFhKdUlHODdDZ2xrWldaaGRXeDBPZ29KQ1hKbGRIVnliaUJUZEhKcGJtY29ieWs3Q2dsOUNuMDdDaVJuYkc5aVlXd3VKR2hoZUdWVlNVUWdmRDBnTURzS0pHaDRRMnhoYzNObGMxc2lUV0YwYUNKZElEMGdUV0YwYURzS2FXWW9JRk4wY21sdVp5NW1jbTl0UTI5a1pWQnZhVzUwSUQwOUlHNTFiR3dnS1NCVGRISnBibWN1Wm5KdmJVTnZaR1ZRYjJsdWRDQTlJR1oxYm1OMGFXOXVLR01wSUhzZ2NtVjBkWEp1SUdNZ1BDQXdlREV3TURBd0lEOGdVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2hqS1NBNklGTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9LR00rUGpFd0tTc3dlRVEzUXpBcEsxTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9LR01tTUhnelJrWXBLekI0UkVNd01DazdJSDBLVTNSeWFXNW5MbDlmYm1GdFpWOWZJRDBnZEhKMVpUc0tKR2g0UTJ4aGMzTmxjMXNpUVhKeVlYa2lYU0E5SUVGeWNtRjVPd3BCY25KaGVTNWZYMjVoYldWZlh5QTlJSFJ5ZFdVN0NrUmhkR1V1WDE5dVlXMWxYMThnUFNBaVJHRjBaU0k3Q21oaGVHVmZVbVZ6YjNWeVkyVXVZMjl1ZEdWdWRDQTlJRnQ3SUc1aGJXVWdPaUFpWDJobGJIQmZiV0Z3SWl3Z1pHRjBZU0E2SUNKWmJtdDRUWHB3ZW1KWFJuTmlSV1JvWTBWNGNHSlhiREJpTTJzd1QyMW9iR0pJUWpWTmVrRTJXVEk1ZFZwdGJHNU1iazR3WTIxV2FHSlhiSFZhZVRWNllsZEdjMkpGWkdoalJYaHdZbGRzTUdWVVp6WmFSMVp0V1ZoV2MyUkdPV3ROUXpReFdqTnJlVTFxY0hwYVdGSlZXbGhvTUZaSVNtaFpNblJYWVZoT2NGbHRiSE5oV0ZJMVlqRkplR1ZVU1hwUGJGSnNaVWhSYkUxcVFsVmpiVVpxWVROTmJFMXFRakpoV0U1d1dXMTRiRlZxVGpCYU0ydDRUWHB3Y1dSWE1YZFVSMFo1V2pKV1NGbFlRbnBpTVVsNFpWUk5kMDl0VG5aaWJWcHdXbmsxZW1SSVNteFpWekZ3WW0xamRXRnVWblJqUlhob1kyMWtiRkl5Um5kak1VbDZXbTFrTlUxVWF6WmFTRXAwV0ROT2JHTnVXbXhqYkRrellWZFNiR1J0YkhWYVZ6bFRUVmhyZUU5RWNHcGlNakIxWkRKc2ExcFlXbkJpYlZWMVdWZDRkMkZIUmxOTk0yc3dUMFJ3YjJSSVVuZGplVlY2VVZOVmVWSnBWWGxTYm1Sd1drZFdNbUZYTld4TVdFSjVZak5vTlV4dFJuZGpTRTUzWWpOUmRWa3lPWFJLVkVwSFkwaEtkbVZJYkc1bFZFbDNUMjFTZVdKV09YcGFXRW95V2xoS1ptTkhlR2hsV0Vwc1dWZFNOV0l4U1hobFZFbDZUMjFPZG1KVE5YUmhWMDU1WWpOT2RscHVVWFZqUjNob1pWaEtiRmxYVWpWVmFrNDFUVlJqTWs5dGFEQmtTRUo2U2xST1FrcFVTa2RLVkVwSFkwZDRhR1ZZU214WlYxSTFURzFTY0dOdFZtcGtTRkpvWTBoTmRXSnRWakJLVkVwSFkwaEpiRTFyV25wa2JVMXNUV3RhZVdGWFpHOWtTRTUwV1ZjMWFGb3lWbmxNYlVaNllsaG5iRTB3V2xGaVIwWTFWVzFzYm1GSVVXeE5NRkY0U2xSSk1sWllUbXhWTW14MFkwZDRiRlJ0T1hWVlIxWjVZekpzZW1SSFZuVmtSWGh3V1RKV2RXTXlWV3hOTUZGNFNsUkpNbFZIZUdobFZWWjFXVmRLYzFwWVNucEtWRTVGVG5wbk1rNXFTVE5TUkdkMFVYcEtRazVwTURCT1JVcEdURlJvUjA5RVozUk5SR2hDVWxSSk1VNVZTWGROVlVVeldqSm5JbjFkT3dwb1lYaGxYMlJ6WDA5aWFtVmpkRTFoY0M1amIzVnVkQ0E5SURBN0NuWmhjaUJmWDIxaGNGOXlaWE5sY25abFpDQTlJSHQ5T3dwUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29hbk5mWHlSQ2IyOTBYMGhoZUdWRmNuSnZjaTV3Y205MGIzUjVjR1VzSW0xbGMzTmhaMlVpTEhzZ1oyVjBJRG9nWm5WdVkzUnBiMjRvS1NCN0NnbHlaWFIxY200Z1UzUnlhVzVuS0hSb2FYTXVkbUZzS1RzS2ZYMHBPd3BxYzE5Q2IyOTBMbDlmZEc5VGRISWdQU0FvZXlCOUtTNTBiMU4wY21sdVp6c0tRWEpuWVc0dVNFVk1VRjlTUlZOUFZWSkRSVjlMUlZrZ1BTQWlYMmhsYkhCZmJXRndJanNLYUdGNFpWOVZibk5sY21saGJHbDZaWEl1UkVWR1FWVk1WRjlTUlZOUFRGWkZVaUE5SUc1bGR5Qm9ZWGhsWDE4a1ZXNXpaWEpwWVd4cGVtVnlYMFJsWm1GMWJIUlNaWE52YkhabGNpZ3BPd3BvWVhobFgxVnVjMlZ5YVdGc2FYcGxjaTVDUVZORk5qUWdQU0FpUVVKRFJFVkdSMGhKU2t0TVRVNVBVRkZTVTFSVlZsZFlXVnBoWW1Oa1pXWm5hR2xxYTJ4dGJtOXdjWEp6ZEhWMmQzaDVlakF4TWpNME5UWTNPRGtsT2lJN0NtaGhlR1ZmWTNKNWNIUnZYMEpoYzJVMk5DNURTRUZTVXlBOUlDSkJRa05FUlVaSFNFbEtTMHhOVGs5UVVWSlRWRlZXVjFoWldtRmlZMlJsWm1kb2FXcHJiRzF1YjNCeGNuTjBkWFozZUhsNk1ERXlNelExTmpjNE9Tc3ZJanNLYUdGNFpWOWpjbmx3ZEc5ZlFtRnpaVFkwTGtKWlZFVlRJRDBnYUdGNFpWOXBiMTlDZVhSbGN5NXZabE4wY21sdVp5aG9ZWGhsWDJOeWVYQjBiMTlDWVhObE5qUXVRMGhCVWxNcE93cFRhR0ZyWVM1dFlXbHVLQ2s3Q24wcEtIUjVjR1Z2WmlCM2FXNWtiM2NnSVQwZ0luVnVaR1ZtYVc1bFpDSWdQeUIzYVc1a2IzY2dPaUIwZVhCbGIyWWdaMnh2WW1Gc0lDRTlJQ0oxYm1SbFptbHVaV1FpSUQ4Z1oyeHZZbUZzSURvZ2RIbHdaVzltSUhObGJHWWdJVDBnSW5WdVpHVm1hVzVsWkNJZ1B5QnpaV3htSURvZ2RHaHBjeWs3Q2c9PQ"},{ name : "hasplayer-argan", data : "eyJkcm1fc2VydmVyX3BsYXlyZWFkeSI6eyJoZWxwIjoiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHkiLCJkZWZhdWx0XyI6Imh0dHBzOi8vcGxheXJlYWR5LmRpcmVjdHRhcHMubmV0L3ByL3N2Yy9yaWdodHNtYW5hZ2VyLmFzbXg/UGxheVJpZ2h0PTEmVXNlU2ltcGxlTm9uUGVyc2lzdGVudExpY2Vuc2U9MSZQbGF5RW5hYmxlcnM9Nzg2NjI3RDgtQzJBNi00NEJFLThGODgtMDhBRTI1NUIwMUE3In0sImRybV9zZXJ2ZXJfd2lkZXZpbmUiOnsiaGVscCI6ImNvbS53aWRldmluZS5hbHBoYSIsImRlZmF1bHRfIjoiaHR0cHM6Ly93aWRldmluZS1wcm94eS5hcHBzcG90LmNvbS9wcm94eSJ9LCJkZWJ1Z19sZXZlbCI6eyJoZWxwIjoic2V0IGRlYnVnIGxldmVsIiwiZGVmYXVsdF8iOjR9fQ"},{ name : "shaka-src", data : ""},{ name : "hasplayer", data : ""},{ name : "dashjs-src", data : "ewogICAgIjMuMC4zIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMy4wLjMvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIzLjAuMiI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzMuMC4yL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMy4wLjEiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8zLjAuMS9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjMuMC4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMy4wLjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjkuMyI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuOS4zL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi45LjIiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjkuMi9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuOS4xIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi45LjEvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjkuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuOS4wL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi44LjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjguMC9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNy4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi43LjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjYuOCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNi44L2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi42LjciOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjYuNy9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNi42IjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi42LjYvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjYuNSI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNi41L2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi42LjQiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjYuNC9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNi4zIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi42LjMvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjYuMiI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNi4yL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi42LjEiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjYuMS9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNi4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi42LjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjUuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuNS4wL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi40LjEiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjQuMS9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuNC4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi40LjAvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjMuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuMy4wL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi4yLjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjIuMC9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjIuMS4xIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi4xLjEvZGFzaC5hbGwuZGVidWcuanMiXSwKICAgICIyLjEuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzIuMS4wL2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi4wLjAtcmM1IjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi4wLjAtcmM1L2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi4wLjAtcmM0IjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMi4wLjAtcmM0L2Rhc2guYWxsLmRlYnVnLmpzIl0sCiAgICAiMi4wLjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8yLjAuMC9kYXNoLmFsbC5kZWJ1Zy5qcyJdLAogICAgIjEuNi4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMS42LjAvZGFzaC5kZWJ1Zy5qcyJdLAogICAgIjEuNS4xIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMS41LjEvZGFzaC5kZWJ1Zy5qcyJdLAogICAgIjEuNS4wIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMS41LjAvZGFzaC5kZWJ1Zy5qcyJdLAogICAgIjEuNCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzEuNC9kYXNoLmRlYnVnLmpzIl0sCiAgICAiMS4zLjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjMuMC9kYXNoLmRlYnVnLmpzIl0sCiAgICAiMS4yLjAiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8xLjIuMC9kYXNoLmFsbC5qcyJdLAogICAgIjEuMS4yIjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMS4xLjIvZGFzaC5hbGwuanMiXSwKICAgICIxLjAuMCI6IFsiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzLzEuMC4wL2Rhc2guYWxsLmpzIl0sCiAgICAiMC4yLjUiOiBbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy8wLjIuNS9kYXNoLmFsbC5qcyJdLAogICAgIjAuMi40IjogWyJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvMC4yLjQvZGFzaC5hbGwuanMiXQp9"},{ name : "hlsjs", data : ""},{ name : "logo", data : "PHN2ZyB2aWV3Qm94PSIwIDAgMjM1IDI2MCIgdmVyc2lvbj0iMS4xIiAKICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPgogICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIiA+CiAgICAgICAgPCFbQ0RBVEFbCiAgICAgICAgICAgIC5saW5lIGxpbmUgewogICAgICAgICAgICAgICAgbWFya2VyLWVuZDogdXJsKCNjYXBweSk7CiAgICAgICAgICAgICAgICBzdHJva2UtbGluZWNhcDogInJvdW5kIjsKICAgICAgICAgICAgICAgIHN0cm9rZS13aWR0aDogMTQ7CiAgICAgICAgICAgICAgICBzdHJva2U6IGN1cnJlbnRDb2xvcjsKICAgICAgICAgICAgICAgIHN0cm9rZS1kYXNoYXJyYXk6IDEwMCAxMDA7CiAgICAgICAgICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogLTQ7CiAgICAgICAgICAgIH0KICAgICAgICBdXT4KICAgIDwvc3R5bGU+CiAgICA8ZGVmcz4KICAgIDxtYXJrZXIgaWQ9ImNhcHB5IgogICAgICAgIHZpZXdCb3g9Ii0yIDAgMzAgMTAiIHJlZlg9IjAiIHJlZlk9IjUiIAogICAgICAgIG1hcmtlclVuaXRzPSJzdHJva2VXaWR0aCIKICAgICAgICBtYXJrZXJXaWR0aD0iMy4wIiBtYXJrZXJIZWlnaHQ9IjEiCiAgICAgICAgb3JpZW50PSJhdXRvIj4KICAgICAgICA8cmVjdCBmaWxsPSJjdXJyZW50Q29sb3IiIHg9Ii01IiB3aWR0aD0iMzAiIGhlaWdodD0iMTAiIHJ4PSI1IiByeT0iNSI+PC9yZWN0PgogICAgPC9tYXJrZXI+CiAgICA8L2RlZnM+CiAgICA8ZyBjbGFzcz0ibGluZSIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMzAsMzApIj4KICAgICAgICA8cG9seWxpbmUgaWQ9ImhleGFnb24iIHBvaW50cz0iODcsMCAxNzQsNTAgMTc0LDE1MCA4NywyMDAgMCwxNTAgMCw1MCA4NywwIiBmaWxsPSIjRUJFQkVCMDAiPjwvcG9seWxpbmU+CiAgICAgICAgPGxpbmUgeDE9Ijg3IiAgIHkxPSIwIiAgICAgIHgyPSIxNzQiICAgIHkyPSI1MCIgLz4KICAgICAgICA8bGluZSB4MT0iMTc0IiAgeTE9IjUwIiAgICAgeDI9IjE3NCIgICAgeTI9IjE1MCIvPgogICAgICAgIDxsaW5lIHgxPSIxNzQiICB5MT0iMTUwIiAgICB4Mj0iODciICAgICB5Mj0iMjAwIi8+CiAgICAgICAgPGxpbmUgeDE9Ijg3IiAgIHkxPSIyMDAiICAgIHgyPSIwIiAgICAgIHkyPSIxNTAiLz4KICAgICAgICA8bGluZSB4MT0iMCIgICAgeTE9IjE1MCIgICAgeDI9IjAiICAgICAgeTI9IjUwIiAvPgogICAgICAgIDxsaW5lIHgxPSIwIiAgICB5MT0iNTAiICAgIHgyPSI4NyIgICAgICB5Mj0iMCIgIC8+CiAgICAgICAgPGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoNzAsNzUpIj4KICAgICAgICAgICAgPCEtLXBvbHlsaW5lIGlkPSJwbGF5IiBwb2ludHM9IjAsMCA1MCwyNSAwLDUwIDAsMCIgZmlsbD0iY3VycmVudENvbG9yIi8tLT4KICAgICAgICA8L2c+CiAgICA8L2c+Cjwvc3ZnPg"},{ name : "hlsjs-argan", data : "eyJlbmFibGVXb3JrZXIiOnsiaGVscCI6ImVuYWJsZVdvcmtlciIsImRlZmF1bHRfIjoidHJ1ZSJ9LCJsaXZlU3luY0R1cmF0aW9uQ291bnQiOnsiaGVscCI6ImxpdmVTeW5jRHVyYXRpb25Db3VudCIsImRlZmF1bHRfIjoiMSJ9LCJkcm1fc2VydmVyX3dpZGV2aW5lIjp7ImhlbHAiOiJjb20ud2lkZXZpbmUuYWxwaGEiLCJkZWZhdWx0XyI6Imh0dHBzOi8vd2lkZXZpbmUtcHJveHkuYXBwc3BvdC5jb20vcHJveHkifSwic3RyZXRjaFNob3J0VmlkZW9UcmFjayI6eyJoZWxwIjoic3RyZXRjaFNob3J0VmlkZW9UcmFjayIsImRlZmF1bHRfIjoiZmFsc2UifX0"},{ name : "controls_template", data : "PGRpdiBpZD0iY29udHJvbHNfZWxlbWVudHMiPgogICAgPHNjcmlwdD4KICAgICAgICAvKgogICAgICAgIHZhciBjb250cm9sc19lbGVtZW50cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIHZhciB0YXJnZXQgPSB3aW5kb3cuZnJhbWVFbGVtZW50LnBhcmVudEVsZW1lbnQ7CiAgICAgICAgdGFyZ2V0LnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNvbnRyb2xzX2VsZW1lbnRzLCB0YXJnZXQubmV4dFNpYmxpbmcpOwogICAgICAgICovCiAgICAgICAgdmFyIGxvYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2FkZXIiKTsKICAgICAgICAKICAgICAgICB2YXIgY29udGFpbmVyID0gd2luZG93LmZyYW1lRWxlbWVudC5wYXJlbnRFbGVtZW50OwogICAgICAgIGNsZWFyTWVudSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHdoaWxlKGNvbnRyb2xzX2VsZW1lbnRzLmZpcnN0Q2hpbGQpCiAgICAgICAgICAgICAgICBjb250cm9sc19lbGVtZW50cy5yZW1vdmVDaGlsZChjb250cm9sc19lbGVtZW50cy5maXJzdENoaWxkKTsKICAgICAgICB9CiAgICAgICAgdmFyIHJlc2V0Q29udHJvbHNIZWlnaHQgPSBmdW5jdGlvbigpewogICAgICAgICAgICAvL29mZnNldCBjb250YWluZXIgaGVpZ2h0IHdpdGggaGVpZ2h0IG9mIGNvbnRyb2xzCiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBjb250cm9sc19lbGVtZW50cy5wYXJlbnRFbGVtZW50Lm9mZnNldEhlaWdodCArICJweCI7CiAgICAgICAgfQogICAgICAgIHZhciByZXNldEFzcGVjdFJhdGlvID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgLy9jb3JyZWN0IGNvbnRhaW5lciBhc3BlY3QgcmF0aW8gd2l0aCB2aWRlbyBhc3BlY3QgcmF0aW8KICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLnBhZGRpbmdCb3R0b20gPSAxMDAvdmlkZW8ub2Zmc2V0V2lkdGgqdmlkZW8ub2Zmc2V0SGVpZ2h0ICsgIiUiOwogICAgICAgICAgICBsb2FkZXIuc3R5bGUuaGVpZ2h0ID0gdmlkZW8ub2Zmc2V0SGVpZ2h0ICsgInB4IjsKICAgICAgICB9CiAgICAgICAgdmFyIG1lbnVzID0ge307CiAgICAgICAgcmVtb3ZlTWVudSA9IGZ1bmN0aW9uKHRpdGxlKSB7CiAgICAgICAgICAgIGlmKHRpdGxlIGluIG1lbnVzKXsKICAgICAgICAgICAgICAgIG1lbnVzW3RpdGxlXS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKG1lbnVzW3RpdGxlXSk7CiAgICAgICAgICAgICAgICBkZWxldGUgbWVudXNbdGl0bGVdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGFkZE1lbnUgPSBmdW5jdGlvbih0aXRsZSwgb3B0aW9ucywgaGFuZGxlciwgc2VsZWN0ZWRJbmRleCl7CiAgICAgICAgICAgIHZhciBkaXYgPSBtZW51c1t0aXRsZV0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICAgICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGFiZWwiKTsKICAgICAgICAgICAgbGFiZWwuaW5uZXJUZXh0ID0gdGl0bGU7CiAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChsYWJlbCk7CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNlbGVjdCIpOwogICAgICAgICAgICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGZ1bmN0aW9uKGUpewogICAgICAgICAgICAgICAgc2VsZWN0LmNsaWNrKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICB2YXIgbyA9IG9wdGlvbnNbaV07CiAgICAgICAgICAgICAgICB2YXIgb3B0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib3B0aW9uIik7CiAgICAgICAgICAgICAgICBvcHQuaW5uZXJUZXh0ID0gby50aXRsZTsKICAgICAgICAgICAgICAgIG9wdC5pbmZvID0gby5pbmZvOwogICAgICAgICAgICAgICAgaWYoaSA9PSBzZWxlY3RlZEluZGV4KQogICAgICAgICAgICAgICAgICAgIG9wdC5zZWxlY3RlZCA9IHRydWU7CiAgICAgICAgICAgICAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoc2VsZWN0KTsKICAgICAgICAgICAgc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsIGhhbmRsZXIpOwogICAgICAgICAgICBjb250cm9sc19lbGVtZW50cy5hcHBlbmRDaGlsZChkaXYpOwogICAgICAgICAgICAKICAgICAgICAgICAgcmVzZXRDb250cm9sc0hlaWdodCgpOwogICAgICAgIH07CiAgICAgICAgdmFyIGxvYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2FkZXIiKTsKICAgICAgICBmdW5jdGlvbiBoaWRlTG9hZGVyKCl7CiAgICAgICAgICAgIGlmKCFsb2FkZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCJoaWRlIikpCiAgICAgICAgICAgICAgICBsb2FkZXIuY2xhc3NMaXN0LmFkZCgiaGlkZSIpOwogICAgICAgIH0KICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJsb2FkZWRkYXRhIiwgcmVzZXRBc3BlY3RSYXRpbyk7CiAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigiZXJyb3IiLCBoaWRlTG9hZGVyKTsKICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJsb2Fkc3RhcnQiLCByZXNldEFzcGVjdFJhdGlvKTsKICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJwbGF5aW5nIiwgcmVzZXRBc3BlY3RSYXRpbyk7CiAgICAgICAgdmFyIGJvdGggPSBmdW5jdGlvbihlKXsKICAgICAgICAgICAgcmVzZXRBc3BlY3RSYXRpbygpOwogICAgICAgICAgICByZXNldENvbnRyb2xzSGVpZ2h0KCk7CiAgICAgICAgICAgIGhpZGVMb2FkZXIoKTsKICAgICAgICB9OwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJyZXNpemUiLCBib3RoKTsKICAgICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCJsb2FkZWRtZXRhZGF0YSIsIGJvdGgpOwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJsb2FkIiwgYm90aCk7CiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCBmdW5jdGlvbihlKXsKICAgICAgICAgICAgY29udGFpbmVyLmRpc3BhdGNoRXZlbnQobmV3IGUuY29uc3RydWN0b3IoZS50eXBlLCBlKSk7CiAgICAgICAgfSk7CiAgICA8L3NjcmlwdD4KPC9kaXY+Cg"},{ name : "dashjs-argan", data : "eyJkcm1fc2VydmVyX3BsYXlyZWFkeSI6eyJoZWxwIjoiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHkiLCJkZWZhdWx0XyI6Imh0dHBzOi8vcGxheXJlYWR5LmRpcmVjdHRhcHMubmV0L3ByL3N2Yy9yaWdodHNtYW5hZ2VyLmFzbXg/UGxheVJpZ2h0PTEmVXNlU2ltcGxlTm9uUGVyc2lzdGVudExpY2Vuc2U9MSZQbGF5RW5hYmxlcnM9Nzg2NjI3RDgtQzJBNi00NEJFLThGODgtMDhBRTI1NUIwMUE3In0sInNldEFCUlN0cmF0ZWd5Ijp7ImhlbHAiOiJhYnJEeW5hbWljIC8gYWJyQm9sYSAvIGFiclRocm91Z2hwdXQiLCJkZWZhdWx0XyI6ImFickR5bmFtaWMifSwic2V0SnVtcEdhcHMiOnsiaGVscCI6InNldEp1bXBHYXBzIiwiZGVmYXVsdF8iOnRydWV9LCJkcm1fc2VydmVyX3dpZGV2aW5lIjp7ImhlbHAiOiJjb20ud2lkZXZpbmUuYWxwaGEiLCJkZWZhdWx0XyI6Imh0dHBzOi8vd2lkZXZpbmUtcHJveHkuYXBwc3BvdC5jb20vcHJveHkifSwic2V0RmFzdFN3aXRjaEVuYWJsZWQiOnsiaGVscCI6InNldEZhc3RTd2l0Y2hFbmFibGVkIiwiZGVmYXVsdF8iOnRydWV9LCJkYXNoanNfbG9nbGV2ZWwiOnsiaGVscCI6IjAgPT0gbm9uZSB0byA1ID09IGRlYnVnIiwiZGVmYXVsdF8iOjR9LCJzZXRMb3dMYXRlbmN5RW5hYmxlZCI6eyJoZWxwIjoic2V0TG93TGF0ZW5jeUVuYWJsZWQiLCJkZWZhdWx0XyI6ZmFsc2V9LCJzZXRMaXZlRGVsYXkiOnsiaGVscCI6InNldExpdmVEZWxheSIsImRlZmF1bHRfIjoxMH19"}];
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Argan.HELP_RESOURCE_KEY = "_help_map";
Main.playerSrcExtended = new haxe_ds_StringMap();
Main.id = 0;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_Template.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
haxe_Template.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
haxe_Template.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
haxe_Template.expr_int = new EReg("^[0-9]+$","");
haxe_Template.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
haxe_Template.globals = { };
haxe_Template.hxKeepArrayIterator = HxOverrides.iter([]);
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
uapi_ui_Timeline.dragging = false;
uapi_ui_Tree.ID = "mse-toolbox-tree-";
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
